/*
Mullvad App API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mullvad_api

import (
	"encoding/json"
)

// checks if the ErrorSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorSchema{}

// ErrorSchema struct for ErrorSchema
type ErrorSchema struct {
	// The error code.
	Code *string `json:"code,omitempty"`
	// The error message.
	Error *string `json:"error,omitempty"`
}

// NewErrorSchema instantiates a new ErrorSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorSchema() *ErrorSchema {
	this := ErrorSchema{}
	return &this
}

// NewErrorSchemaWithDefaults instantiates a new ErrorSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorSchemaWithDefaults() *ErrorSchema {
	this := ErrorSchema{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ErrorSchema) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorSchema) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ErrorSchema) HasCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ErrorSchema) SetCode(v string) {
	o.Code = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *ErrorSchema) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorSchema) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *ErrorSchema) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *ErrorSchema) SetError(v string) {
	o.Error = &v
}

func (o ErrorSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableErrorSchema struct {
	value *ErrorSchema
	isSet bool
}

func (v NullableErrorSchema) Get() *ErrorSchema {
	return v.value
}

func (v *NullableErrorSchema) Set(val *ErrorSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorSchema(val *ErrorSchema) *NullableErrorSchema {
	return &NullableErrorSchema{value: val, isSet: true}
}

func (v NullableErrorSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


