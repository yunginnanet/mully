/*
Mullvad App API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mullvad_api

import (
	"encoding/json"
)

// checks if the BridgeRelay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BridgeRelay{}

// BridgeRelay struct for BridgeRelay
type BridgeRelay struct {
	Hostname *string `json:"hostname,omitempty"`
	Location *string `json:"location,omitempty"`
	Active *bool `json:"active,omitempty"`
	Owned *bool `json:"owned,omitempty"`
	Provider *string `json:"provider,omitempty"`
	Ipv4AddrIn *string `json:"ipv4_addr_in,omitempty"`
	IncludeInCountry *bool `json:"include_in_country,omitempty"`
	Weight *int32 `json:"weight,omitempty"`
}

// NewBridgeRelay instantiates a new BridgeRelay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBridgeRelay() *BridgeRelay {
	this := BridgeRelay{}
	return &this
}

// NewBridgeRelayWithDefaults instantiates a new BridgeRelay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBridgeRelayWithDefaults() *BridgeRelay {
	this := BridgeRelay{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *BridgeRelay) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *BridgeRelay) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *BridgeRelay) SetHostname(v string) {
	o.Hostname = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *BridgeRelay) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *BridgeRelay) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *BridgeRelay) SetLocation(v string) {
	o.Location = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *BridgeRelay) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *BridgeRelay) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *BridgeRelay) SetActive(v bool) {
	o.Active = &v
}

// GetOwned returns the Owned field value if set, zero value otherwise.
func (o *BridgeRelay) GetOwned() bool {
	if o == nil || IsNil(o.Owned) {
		var ret bool
		return ret
	}
	return *o.Owned
}

// GetOwnedOk returns a tuple with the Owned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetOwnedOk() (*bool, bool) {
	if o == nil || IsNil(o.Owned) {
		return nil, false
	}
	return o.Owned, true
}

// HasOwned returns a boolean if a field has been set.
func (o *BridgeRelay) HasOwned() bool {
	if o != nil && !IsNil(o.Owned) {
		return true
	}

	return false
}

// SetOwned gets a reference to the given bool and assigns it to the Owned field.
func (o *BridgeRelay) SetOwned(v bool) {
	o.Owned = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *BridgeRelay) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *BridgeRelay) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *BridgeRelay) SetProvider(v string) {
	o.Provider = &v
}

// GetIpv4AddrIn returns the Ipv4AddrIn field value if set, zero value otherwise.
func (o *BridgeRelay) GetIpv4AddrIn() string {
	if o == nil || IsNil(o.Ipv4AddrIn) {
		var ret string
		return ret
	}
	return *o.Ipv4AddrIn
}

// GetIpv4AddrInOk returns a tuple with the Ipv4AddrIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetIpv4AddrInOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4AddrIn) {
		return nil, false
	}
	return o.Ipv4AddrIn, true
}

// HasIpv4AddrIn returns a boolean if a field has been set.
func (o *BridgeRelay) HasIpv4AddrIn() bool {
	if o != nil && !IsNil(o.Ipv4AddrIn) {
		return true
	}

	return false
}

// SetIpv4AddrIn gets a reference to the given string and assigns it to the Ipv4AddrIn field.
func (o *BridgeRelay) SetIpv4AddrIn(v string) {
	o.Ipv4AddrIn = &v
}

// GetIncludeInCountry returns the IncludeInCountry field value if set, zero value otherwise.
func (o *BridgeRelay) GetIncludeInCountry() bool {
	if o == nil || IsNil(o.IncludeInCountry) {
		var ret bool
		return ret
	}
	return *o.IncludeInCountry
}

// GetIncludeInCountryOk returns a tuple with the IncludeInCountry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetIncludeInCountryOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeInCountry) {
		return nil, false
	}
	return o.IncludeInCountry, true
}

// HasIncludeInCountry returns a boolean if a field has been set.
func (o *BridgeRelay) HasIncludeInCountry() bool {
	if o != nil && !IsNil(o.IncludeInCountry) {
		return true
	}

	return false
}

// SetIncludeInCountry gets a reference to the given bool and assigns it to the IncludeInCountry field.
func (o *BridgeRelay) SetIncludeInCountry(v bool) {
	o.IncludeInCountry = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *BridgeRelay) GetWeight() int32 {
	if o == nil || IsNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BridgeRelay) GetWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *BridgeRelay) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *BridgeRelay) SetWeight(v int32) {
	o.Weight = &v
}

func (o BridgeRelay) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BridgeRelay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.Owned) {
		toSerialize["owned"] = o.Owned
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Ipv4AddrIn) {
		toSerialize["ipv4_addr_in"] = o.Ipv4AddrIn
	}
	if !IsNil(o.IncludeInCountry) {
		toSerialize["include_in_country"] = o.IncludeInCountry
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}
	return toSerialize, nil
}

type NullableBridgeRelay struct {
	value *BridgeRelay
	isSet bool
}

func (v NullableBridgeRelay) Get() *BridgeRelay {
	return v.value
}

func (v *NullableBridgeRelay) Set(val *BridgeRelay) {
	v.value = val
	v.isSet = true
}

func (v NullableBridgeRelay) IsSet() bool {
	return v.isSet
}

func (v *NullableBridgeRelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBridgeRelay(val *BridgeRelay) *NullableBridgeRelay {
	return &NullableBridgeRelay{value: val, isSet: true}
}

func (v NullableBridgeRelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBridgeRelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


