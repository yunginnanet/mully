/*
Mullvad App API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package mullvad_api

import (
	"encoding/json"
)

// checks if the WireGuardPubkey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WireGuardPubkey{}

// WireGuardPubkey struct for WireGuardPubkey
type WireGuardPubkey struct {
	// Convenience field with the public key encoded to use with the API (eg when deleting it), same as the pubkey field but urlencoded.
	Id *string `json:"id,omitempty"`
	// The WireGuard public key.
	Pubkey *string `json:"pubkey,omitempty"`
	// The ipv4 peer adress for WireGuard. Note that the mask may be bigger then a single IP.
	Ipv4Address *string `json:"ipv4_address,omitempty"`
	// The ipv6 peer address for WireGuard. Note that the mask may be bigger then a single IP.
	Ipv6Address *string `json:"ipv6_address,omitempty"`
}

// NewWireGuardPubkey instantiates a new WireGuardPubkey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWireGuardPubkey() *WireGuardPubkey {
	this := WireGuardPubkey{}
	return &this
}

// NewWireGuardPubkeyWithDefaults instantiates a new WireGuardPubkey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWireGuardPubkeyWithDefaults() *WireGuardPubkey {
	this := WireGuardPubkey{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WireGuardPubkey) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPubkey) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WireGuardPubkey) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WireGuardPubkey) SetId(v string) {
	o.Id = &v
}

// GetPubkey returns the Pubkey field value if set, zero value otherwise.
func (o *WireGuardPubkey) GetPubkey() string {
	if o == nil || IsNil(o.Pubkey) {
		var ret string
		return ret
	}
	return *o.Pubkey
}

// GetPubkeyOk returns a tuple with the Pubkey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPubkey) GetPubkeyOk() (*string, bool) {
	if o == nil || IsNil(o.Pubkey) {
		return nil, false
	}
	return o.Pubkey, true
}

// HasPubkey returns a boolean if a field has been set.
func (o *WireGuardPubkey) HasPubkey() bool {
	if o != nil && !IsNil(o.Pubkey) {
		return true
	}

	return false
}

// SetPubkey gets a reference to the given string and assigns it to the Pubkey field.
func (o *WireGuardPubkey) SetPubkey(v string) {
	o.Pubkey = &v
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *WireGuardPubkey) GetIpv4Address() string {
	if o == nil || IsNil(o.Ipv4Address) {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPubkey) GetIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Address) {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *WireGuardPubkey) HasIpv4Address() bool {
	if o != nil && !IsNil(o.Ipv4Address) {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *WireGuardPubkey) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *WireGuardPubkey) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WireGuardPubkey) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *WireGuardPubkey) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *WireGuardPubkey) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

func (o WireGuardPubkey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WireGuardPubkey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Pubkey) {
		toSerialize["pubkey"] = o.Pubkey
	}
	if !IsNil(o.Ipv4Address) {
		toSerialize["ipv4_address"] = o.Ipv4Address
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["ipv6_address"] = o.Ipv6Address
	}
	return toSerialize, nil
}

type NullableWireGuardPubkey struct {
	value *WireGuardPubkey
	isSet bool
}

func (v NullableWireGuardPubkey) Get() *WireGuardPubkey {
	return v.value
}

func (v *NullableWireGuardPubkey) Set(val *WireGuardPubkey) {
	v.value = val
	v.isSet = true
}

func (v NullableWireGuardPubkey) IsSet() bool {
	return v.isSet
}

func (v *NullableWireGuardPubkey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWireGuardPubkey(val *WireGuardPubkey) *NullableWireGuardPubkey {
	return &NullableWireGuardPubkey{value: val, isSet: true}
}

func (v NullableWireGuardPubkey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWireGuardPubkey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


