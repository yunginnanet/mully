// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: management_interface.proto

package mullvad_mgmt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ManagementServiceClient is the client API for ManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementServiceClient interface {
	// Control and get tunnel state
	ConnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	DisconnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	ReconnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	GetTunnelState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TunnelState, error)
	// Control the daemon and receive events
	EventsListen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManagementService_EventsListenClient, error)
	PrepareRestart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FactoryReset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrentVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppVersionInfo, error)
	IsPerformingPostUpgrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Relays and tunnel constraints
	UpdateRelayLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetRelayLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RelayList, error)
	SetRelaySettings(ctx context.Context, in *RelaySettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetBridgeSettings(ctx context.Context, in *BridgeSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetBridgeState(ctx context.Context, in *BridgeState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetObfuscationSettings(ctx context.Context, in *ObfuscationSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Settings
	GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Settings, error)
	SetAllowLan(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetShowBetaReleases(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetBlockWhenDisconnected(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetAutoConnect(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetOpenvpnMssfix(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetWireguardMtu(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetEnableIpv6(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetQuantumResistantTunnel(ctx context.Context, in *QuantumResistantState, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDaitaSettings(ctx context.Context, in *DaitaSettings, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetDnsOptions(ctx context.Context, in *DnsOptions, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetRelayOverride(ctx context.Context, in *RelayOverride, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearAllRelayOverrides(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Account management
	CreateNewAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	LoginAccount(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	LogoutAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetAccountData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AccountData, error)
	GetAccountHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountHistory, error)
	ClearAccountHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWwwAuthToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	SubmitVoucher(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*VoucherSubmission, error)
	// Device management
	GetDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeviceState, error)
	UpdateDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListDevices(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeviceList, error)
	RemoveDevice(ctx context.Context, in *DeviceRemoval, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// WireGuard key management
	SetWireguardRotationInterval(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResetWireguardRotationInterval(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RotateWireguardKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetWireguardKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicKey, error)
	// Custom lists
	CreateCustomList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	DeleteCustomList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateCustomList(ctx context.Context, in *CustomList, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearCustomLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Access methods
	AddApiAccessMethod(ctx context.Context, in *NewAccessMethodSetting, opts ...grpc.CallOption) (*UUID, error)
	RemoveApiAccessMethod(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetApiAccessMethod(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateApiAccessMethod(ctx context.Context, in *AccessMethodSetting, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearCustomApiAccessMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetCurrentApiAccessMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessMethodSetting, error)
	TestCustomApiAccessMethod(ctx context.Context, in *CustomProxy, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	TestApiAccessMethodById(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Split tunneling (Linux)
	GetSplitTunnelProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManagementService_GetSplitTunnelProcessesClient, error)
	AddSplitTunnelProcess(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSplitTunnelProcess(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearSplitTunnelProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Split tunneling (Windows, macOS)
	AddSplitTunnelApp(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveSplitTunnelApp(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ClearSplitTunnelApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetSplitTunnelState(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetExcludedProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExcludedProcessList, error)
	// Notify the split tunnel monitor that a volume was mounted or dismounted
	// (Windows).
	CheckVolumes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Apply a JSON blob to the settings
	// See ../../docs/settings-patch-format.md for a description of the format
	ApplyJsonSettings(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Return a JSON blob containing all overridable settings, if there are any
	ExportJsonSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type managementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementServiceClient(cc grpc.ClientConnInterface) ManagementServiceClient {
	return &managementServiceClient{cc}
}

func (c *managementServiceClient) ConnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ConnectTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DisconnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/DisconnectTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ReconnectTunnel(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ReconnectTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetTunnelState(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*TunnelState, error) {
	out := new(TunnelState)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetTunnelState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) EventsListen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManagementService_EventsListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagementService_ServiceDesc.Streams[0], "/mullvad_daemon.management_interface.ManagementService/EventsListen", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementServiceEventsListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagementService_EventsListenClient interface {
	Recv() (*DaemonEvent, error)
	grpc.ClientStream
}

type managementServiceEventsListenClient struct {
	grpc.ClientStream
}

func (x *managementServiceEventsListenClient) Recv() (*DaemonEvent, error) {
	m := new(DaemonEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementServiceClient) PrepareRestart(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/PrepareRestart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) FactoryReset(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/FactoryReset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCurrentVersion(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetCurrentVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetVersionInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AppVersionInfo, error) {
	out := new(AppVersionInfo)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetVersionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) IsPerformingPostUpgrade(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/IsPerformingPostUpgrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateRelayLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/UpdateRelayLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetRelayLocations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*RelayList, error) {
	out := new(RelayList)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetRelayLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetRelaySettings(ctx context.Context, in *RelaySettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetRelaySettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetBridgeSettings(ctx context.Context, in *BridgeSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetBridgeSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetBridgeState(ctx context.Context, in *BridgeState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetBridgeState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetObfuscationSettings(ctx context.Context, in *ObfuscationSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetObfuscationSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Settings, error) {
	out := new(Settings)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetAllowLan(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetAllowLan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetShowBetaReleases(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetShowBetaReleases", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetBlockWhenDisconnected(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetBlockWhenDisconnected", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetAutoConnect(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetAutoConnect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetOpenvpnMssfix(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetOpenvpnMssfix", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetWireguardMtu(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetWireguardMtu", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetEnableIpv6(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetEnableIpv6", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetQuantumResistantTunnel(ctx context.Context, in *QuantumResistantState, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetQuantumResistantTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetDaitaSettings(ctx context.Context, in *DaitaSettings, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetDaitaSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetDnsOptions(ctx context.Context, in *DnsOptions, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetDnsOptions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetRelayOverride(ctx context.Context, in *RelayOverride, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetRelayOverride", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearAllRelayOverrides(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearAllRelayOverrides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateNewAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/CreateNewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) LoginAccount(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/LoginAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) LogoutAccount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/LogoutAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAccountData(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*AccountData, error) {
	out := new(AccountData)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetAccountData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetAccountHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccountHistory, error) {
	out := new(AccountHistory)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetAccountHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearAccountHistory(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearAccountHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetWwwAuthToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetWwwAuthToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SubmitVoucher(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*VoucherSubmission, error) {
	out := new(VoucherSubmission)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SubmitVoucher", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*DeviceState, error) {
	out := new(DeviceState)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateDevice(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/UpdateDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ListDevices(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*DeviceList, error) {
	out := new(DeviceList)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveDevice(ctx context.Context, in *DeviceRemoval, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/RemoveDevice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetWireguardRotationInterval(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetWireguardRotationInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ResetWireguardRotationInterval(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ResetWireguardRotationInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RotateWireguardKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/RotateWireguardKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetWireguardKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PublicKey, error) {
	out := new(PublicKey)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetWireguardKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CreateCustomList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/CreateCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) DeleteCustomList(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/DeleteCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateCustomList(ctx context.Context, in *CustomList, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/UpdateCustomList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearCustomLists(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearCustomLists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddApiAccessMethod(ctx context.Context, in *NewAccessMethodSetting, opts ...grpc.CallOption) (*UUID, error) {
	out := new(UUID)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/AddApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveApiAccessMethod(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/RemoveApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetApiAccessMethod(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) UpdateApiAccessMethod(ctx context.Context, in *AccessMethodSetting, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/UpdateApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearCustomApiAccessMethods(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearCustomApiAccessMethods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetCurrentApiAccessMethod(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AccessMethodSetting, error) {
	out := new(AccessMethodSetting)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetCurrentApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) TestCustomApiAccessMethod(ctx context.Context, in *CustomProxy, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/TestCustomApiAccessMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) TestApiAccessMethodById(ctx context.Context, in *UUID, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/TestApiAccessMethodById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetSplitTunnelProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ManagementService_GetSplitTunnelProcessesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ManagementService_ServiceDesc.Streams[1], "/mullvad_daemon.management_interface.ManagementService/GetSplitTunnelProcesses", opts...)
	if err != nil {
		return nil, err
	}
	x := &managementServiceGetSplitTunnelProcessesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ManagementService_GetSplitTunnelProcessesClient interface {
	Recv() (*wrapperspb.Int32Value, error)
	grpc.ClientStream
}

type managementServiceGetSplitTunnelProcessesClient struct {
	grpc.ClientStream
}

func (x *managementServiceGetSplitTunnelProcessesClient) Recv() (*wrapperspb.Int32Value, error) {
	m := new(wrapperspb.Int32Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *managementServiceClient) AddSplitTunnelProcess(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/AddSplitTunnelProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveSplitTunnelProcess(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/RemoveSplitTunnelProcess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearSplitTunnelProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearSplitTunnelProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) AddSplitTunnelApp(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/AddSplitTunnelApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) RemoveSplitTunnelApp(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/RemoveSplitTunnelApp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ClearSplitTunnelApps(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ClearSplitTunnelApps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) SetSplitTunnelState(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/SetSplitTunnelState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) GetExcludedProcesses(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ExcludedProcessList, error) {
	out := new(ExcludedProcessList)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/GetExcludedProcesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) CheckVolumes(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/CheckVolumes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ApplyJsonSettings(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ApplyJsonSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementServiceClient) ExportJsonSettings(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/mullvad_daemon.management_interface.ManagementService/ExportJsonSettings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServiceServer is the server API for ManagementService service.
// All implementations must embed UnimplementedManagementServiceServer
// for forward compatibility
type ManagementServiceServer interface {
	// Control and get tunnel state
	ConnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	DisconnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	ReconnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	GetTunnelState(context.Context, *emptypb.Empty) (*TunnelState, error)
	// Control the daemon and receive events
	EventsListen(*emptypb.Empty, ManagementService_EventsListenServer) error
	PrepareRestart(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	FactoryReset(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetCurrentVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	GetVersionInfo(context.Context, *emptypb.Empty) (*AppVersionInfo, error)
	IsPerformingPostUpgrade(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error)
	// Relays and tunnel constraints
	UpdateRelayLocations(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetRelayLocations(context.Context, *emptypb.Empty) (*RelayList, error)
	SetRelaySettings(context.Context, *RelaySettings) (*emptypb.Empty, error)
	SetBridgeSettings(context.Context, *BridgeSettings) (*emptypb.Empty, error)
	SetBridgeState(context.Context, *BridgeState) (*emptypb.Empty, error)
	SetObfuscationSettings(context.Context, *ObfuscationSettings) (*emptypb.Empty, error)
	// Settings
	GetSettings(context.Context, *emptypb.Empty) (*Settings, error)
	SetAllowLan(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	SetShowBetaReleases(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	SetBlockWhenDisconnected(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	SetAutoConnect(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	SetOpenvpnMssfix(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error)
	SetWireguardMtu(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error)
	SetEnableIpv6(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	SetQuantumResistantTunnel(context.Context, *QuantumResistantState) (*emptypb.Empty, error)
	SetDaitaSettings(context.Context, *DaitaSettings) (*emptypb.Empty, error)
	SetDnsOptions(context.Context, *DnsOptions) (*emptypb.Empty, error)
	SetRelayOverride(context.Context, *RelayOverride) (*emptypb.Empty, error)
	ClearAllRelayOverrides(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Account management
	CreateNewAccount(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	LoginAccount(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	LogoutAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetAccountData(context.Context, *wrapperspb.StringValue) (*AccountData, error)
	GetAccountHistory(context.Context, *emptypb.Empty) (*AccountHistory, error)
	ClearAccountHistory(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetWwwAuthToken(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	SubmitVoucher(context.Context, *wrapperspb.StringValue) (*VoucherSubmission, error)
	// Device management
	GetDevice(context.Context, *emptypb.Empty) (*DeviceState, error)
	UpdateDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	ListDevices(context.Context, *wrapperspb.StringValue) (*DeviceList, error)
	RemoveDevice(context.Context, *DeviceRemoval) (*emptypb.Empty, error)
	// WireGuard key management
	SetWireguardRotationInterval(context.Context, *durationpb.Duration) (*emptypb.Empty, error)
	ResetWireguardRotationInterval(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RotateWireguardKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetWireguardKey(context.Context, *emptypb.Empty) (*PublicKey, error)
	// Custom lists
	CreateCustomList(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	DeleteCustomList(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	UpdateCustomList(context.Context, *CustomList) (*emptypb.Empty, error)
	ClearCustomLists(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Access methods
	AddApiAccessMethod(context.Context, *NewAccessMethodSetting) (*UUID, error)
	RemoveApiAccessMethod(context.Context, *UUID) (*emptypb.Empty, error)
	SetApiAccessMethod(context.Context, *UUID) (*emptypb.Empty, error)
	UpdateApiAccessMethod(context.Context, *AccessMethodSetting) (*emptypb.Empty, error)
	ClearCustomApiAccessMethods(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	GetCurrentApiAccessMethod(context.Context, *emptypb.Empty) (*AccessMethodSetting, error)
	TestCustomApiAccessMethod(context.Context, *CustomProxy) (*wrapperspb.BoolValue, error)
	TestApiAccessMethodById(context.Context, *UUID) (*wrapperspb.BoolValue, error)
	// Split tunneling (Linux)
	GetSplitTunnelProcesses(*emptypb.Empty, ManagementService_GetSplitTunnelProcessesServer) error
	AddSplitTunnelProcess(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error)
	RemoveSplitTunnelProcess(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error)
	ClearSplitTunnelProcesses(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Split tunneling (Windows, macOS)
	AddSplitTunnelApp(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	RemoveSplitTunnelApp(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	ClearSplitTunnelApps(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	SetSplitTunnelState(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	GetExcludedProcesses(context.Context, *emptypb.Empty) (*ExcludedProcessList, error)
	// Notify the split tunnel monitor that a volume was mounted or dismounted
	// (Windows).
	CheckVolumes(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Apply a JSON blob to the settings
	// See ../../docs/settings-patch-format.md for a description of the format
	ApplyJsonSettings(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	// Return a JSON blob containing all overridable settings, if there are any
	ExportJsonSettings(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedManagementServiceServer()
}

// UnimplementedManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServiceServer struct {
}

func (UnimplementedManagementServiceServer) ConnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectTunnel not implemented")
}
func (UnimplementedManagementServiceServer) DisconnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisconnectTunnel not implemented")
}
func (UnimplementedManagementServiceServer) ReconnectTunnel(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReconnectTunnel not implemented")
}
func (UnimplementedManagementServiceServer) GetTunnelState(context.Context, *emptypb.Empty) (*TunnelState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTunnelState not implemented")
}
func (UnimplementedManagementServiceServer) EventsListen(*emptypb.Empty, ManagementService_EventsListenServer) error {
	return status.Errorf(codes.Unimplemented, "method EventsListen not implemented")
}
func (UnimplementedManagementServiceServer) PrepareRestart(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrepareRestart not implemented")
}
func (UnimplementedManagementServiceServer) FactoryReset(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FactoryReset not implemented")
}
func (UnimplementedManagementServiceServer) GetCurrentVersion(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentVersion not implemented")
}
func (UnimplementedManagementServiceServer) GetVersionInfo(context.Context, *emptypb.Empty) (*AppVersionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersionInfo not implemented")
}
func (UnimplementedManagementServiceServer) IsPerformingPostUpgrade(context.Context, *emptypb.Empty) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPerformingPostUpgrade not implemented")
}
func (UnimplementedManagementServiceServer) UpdateRelayLocations(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRelayLocations not implemented")
}
func (UnimplementedManagementServiceServer) GetRelayLocations(context.Context, *emptypb.Empty) (*RelayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelayLocations not implemented")
}
func (UnimplementedManagementServiceServer) SetRelaySettings(context.Context, *RelaySettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelaySettings not implemented")
}
func (UnimplementedManagementServiceServer) SetBridgeSettings(context.Context, *BridgeSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeSettings not implemented")
}
func (UnimplementedManagementServiceServer) SetBridgeState(context.Context, *BridgeState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBridgeState not implemented")
}
func (UnimplementedManagementServiceServer) SetObfuscationSettings(context.Context, *ObfuscationSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetObfuscationSettings not implemented")
}
func (UnimplementedManagementServiceServer) GetSettings(context.Context, *emptypb.Empty) (*Settings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSettings not implemented")
}
func (UnimplementedManagementServiceServer) SetAllowLan(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAllowLan not implemented")
}
func (UnimplementedManagementServiceServer) SetShowBetaReleases(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetShowBetaReleases not implemented")
}
func (UnimplementedManagementServiceServer) SetBlockWhenDisconnected(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBlockWhenDisconnected not implemented")
}
func (UnimplementedManagementServiceServer) SetAutoConnect(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAutoConnect not implemented")
}
func (UnimplementedManagementServiceServer) SetOpenvpnMssfix(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOpenvpnMssfix not implemented")
}
func (UnimplementedManagementServiceServer) SetWireguardMtu(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWireguardMtu not implemented")
}
func (UnimplementedManagementServiceServer) SetEnableIpv6(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnableIpv6 not implemented")
}
func (UnimplementedManagementServiceServer) SetQuantumResistantTunnel(context.Context, *QuantumResistantState) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetQuantumResistantTunnel not implemented")
}
func (UnimplementedManagementServiceServer) SetDaitaSettings(context.Context, *DaitaSettings) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDaitaSettings not implemented")
}
func (UnimplementedManagementServiceServer) SetDnsOptions(context.Context, *DnsOptions) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDnsOptions not implemented")
}
func (UnimplementedManagementServiceServer) SetRelayOverride(context.Context, *RelayOverride) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetRelayOverride not implemented")
}
func (UnimplementedManagementServiceServer) ClearAllRelayOverrides(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAllRelayOverrides not implemented")
}
func (UnimplementedManagementServiceServer) CreateNewAccount(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAccount not implemented")
}
func (UnimplementedManagementServiceServer) LoginAccount(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAccount not implemented")
}
func (UnimplementedManagementServiceServer) LogoutAccount(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogoutAccount not implemented")
}
func (UnimplementedManagementServiceServer) GetAccountData(context.Context, *wrapperspb.StringValue) (*AccountData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountData not implemented")
}
func (UnimplementedManagementServiceServer) GetAccountHistory(context.Context, *emptypb.Empty) (*AccountHistory, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountHistory not implemented")
}
func (UnimplementedManagementServiceServer) ClearAccountHistory(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearAccountHistory not implemented")
}
func (UnimplementedManagementServiceServer) GetWwwAuthToken(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWwwAuthToken not implemented")
}
func (UnimplementedManagementServiceServer) SubmitVoucher(context.Context, *wrapperspb.StringValue) (*VoucherSubmission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitVoucher not implemented")
}
func (UnimplementedManagementServiceServer) GetDevice(context.Context, *emptypb.Empty) (*DeviceState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedManagementServiceServer) UpdateDevice(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDevice not implemented")
}
func (UnimplementedManagementServiceServer) ListDevices(context.Context, *wrapperspb.StringValue) (*DeviceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (UnimplementedManagementServiceServer) RemoveDevice(context.Context, *DeviceRemoval) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDevice not implemented")
}
func (UnimplementedManagementServiceServer) SetWireguardRotationInterval(context.Context, *durationpb.Duration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetWireguardRotationInterval not implemented")
}
func (UnimplementedManagementServiceServer) ResetWireguardRotationInterval(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetWireguardRotationInterval not implemented")
}
func (UnimplementedManagementServiceServer) RotateWireguardKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RotateWireguardKey not implemented")
}
func (UnimplementedManagementServiceServer) GetWireguardKey(context.Context, *emptypb.Empty) (*PublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWireguardKey not implemented")
}
func (UnimplementedManagementServiceServer) CreateCustomList(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCustomList not implemented")
}
func (UnimplementedManagementServiceServer) DeleteCustomList(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCustomList not implemented")
}
func (UnimplementedManagementServiceServer) UpdateCustomList(context.Context, *CustomList) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCustomList not implemented")
}
func (UnimplementedManagementServiceServer) ClearCustomLists(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCustomLists not implemented")
}
func (UnimplementedManagementServiceServer) AddApiAccessMethod(context.Context, *NewAccessMethodSetting) (*UUID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) RemoveApiAccessMethod(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) SetApiAccessMethod(context.Context, *UUID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) UpdateApiAccessMethod(context.Context, *AccessMethodSetting) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) ClearCustomApiAccessMethods(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearCustomApiAccessMethods not implemented")
}
func (UnimplementedManagementServiceServer) GetCurrentApiAccessMethod(context.Context, *emptypb.Empty) (*AccessMethodSetting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) TestCustomApiAccessMethod(context.Context, *CustomProxy) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestCustomApiAccessMethod not implemented")
}
func (UnimplementedManagementServiceServer) TestApiAccessMethodById(context.Context, *UUID) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestApiAccessMethodById not implemented")
}
func (UnimplementedManagementServiceServer) GetSplitTunnelProcesses(*emptypb.Empty, ManagementService_GetSplitTunnelProcessesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSplitTunnelProcesses not implemented")
}
func (UnimplementedManagementServiceServer) AddSplitTunnelProcess(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSplitTunnelProcess not implemented")
}
func (UnimplementedManagementServiceServer) RemoveSplitTunnelProcess(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSplitTunnelProcess not implemented")
}
func (UnimplementedManagementServiceServer) ClearSplitTunnelProcesses(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSplitTunnelProcesses not implemented")
}
func (UnimplementedManagementServiceServer) AddSplitTunnelApp(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSplitTunnelApp not implemented")
}
func (UnimplementedManagementServiceServer) RemoveSplitTunnelApp(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSplitTunnelApp not implemented")
}
func (UnimplementedManagementServiceServer) ClearSplitTunnelApps(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearSplitTunnelApps not implemented")
}
func (UnimplementedManagementServiceServer) SetSplitTunnelState(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSplitTunnelState not implemented")
}
func (UnimplementedManagementServiceServer) GetExcludedProcesses(context.Context, *emptypb.Empty) (*ExcludedProcessList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExcludedProcesses not implemented")
}
func (UnimplementedManagementServiceServer) CheckVolumes(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckVolumes not implemented")
}
func (UnimplementedManagementServiceServer) ApplyJsonSettings(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyJsonSettings not implemented")
}
func (UnimplementedManagementServiceServer) ExportJsonSettings(context.Context, *emptypb.Empty) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExportJsonSettings not implemented")
}
func (UnimplementedManagementServiceServer) mustEmbedUnimplementedManagementServiceServer() {}

// UnsafeManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServiceServer will
// result in compilation errors.
type UnsafeManagementServiceServer interface {
	mustEmbedUnimplementedManagementServiceServer()
}

func RegisterManagementServiceServer(s grpc.ServiceRegistrar, srv ManagementServiceServer) {
	s.RegisterService(&ManagementService_ServiceDesc, srv)
}

func _ManagementService_ConnectTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ConnectTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ConnectTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ConnectTunnel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DisconnectTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DisconnectTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/DisconnectTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DisconnectTunnel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ReconnectTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ReconnectTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ReconnectTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ReconnectTunnel(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetTunnelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetTunnelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetTunnelState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetTunnelState(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_EventsListen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServiceServer).EventsListen(m, &managementServiceEventsListenServer{stream})
}

type ManagementService_EventsListenServer interface {
	Send(*DaemonEvent) error
	grpc.ServerStream
}

type managementServiceEventsListenServer struct {
	grpc.ServerStream
}

func (x *managementServiceEventsListenServer) Send(m *DaemonEvent) error {
	return x.ServerStream.SendMsg(m)
}

func _ManagementService_PrepareRestart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).PrepareRestart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/PrepareRestart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).PrepareRestart(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_FactoryReset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).FactoryReset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/FactoryReset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).FactoryReset(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCurrentVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCurrentVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetCurrentVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCurrentVersion(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetVersionInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_IsPerformingPostUpgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).IsPerformingPostUpgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/IsPerformingPostUpgrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).IsPerformingPostUpgrade(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateRelayLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateRelayLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/UpdateRelayLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateRelayLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetRelayLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetRelayLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetRelayLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetRelayLocations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetRelaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelaySettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetRelaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetRelaySettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetRelaySettings(ctx, req.(*RelaySettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetBridgeSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetBridgeSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetBridgeSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetBridgeSettings(ctx, req.(*BridgeSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetBridgeState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BridgeState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetBridgeState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetBridgeState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetBridgeState(ctx, req.(*BridgeState))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetObfuscationSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObfuscationSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetObfuscationSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetObfuscationSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetObfuscationSettings(ctx, req.(*ObfuscationSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetAllowLan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetAllowLan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetAllowLan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetAllowLan(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetShowBetaReleases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetShowBetaReleases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetShowBetaReleases",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetShowBetaReleases(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetBlockWhenDisconnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetBlockWhenDisconnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetBlockWhenDisconnected",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetBlockWhenDisconnected(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetAutoConnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetAutoConnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetAutoConnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetAutoConnect(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetOpenvpnMssfix_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetOpenvpnMssfix(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetOpenvpnMssfix",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetOpenvpnMssfix(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetWireguardMtu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetWireguardMtu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetWireguardMtu",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetWireguardMtu(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetEnableIpv6_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetEnableIpv6(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetEnableIpv6",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetEnableIpv6(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetQuantumResistantTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuantumResistantState)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetQuantumResistantTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetQuantumResistantTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetQuantumResistantTunnel(ctx, req.(*QuantumResistantState))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetDaitaSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DaitaSettings)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetDaitaSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetDaitaSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetDaitaSettings(ctx, req.(*DaitaSettings))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetDnsOptions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DnsOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetDnsOptions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetDnsOptions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetDnsOptions(ctx, req.(*DnsOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetRelayOverride_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayOverride)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetRelayOverride(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetRelayOverride",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetRelayOverride(ctx, req.(*RelayOverride))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearAllRelayOverrides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearAllRelayOverrides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearAllRelayOverrides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearAllRelayOverrides(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateNewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateNewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/CreateNewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateNewAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_LoginAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).LoginAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/LoginAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).LoginAccount(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_LogoutAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).LogoutAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/LogoutAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).LogoutAccount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAccountData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAccountData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetAccountData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAccountData(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetAccountHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetAccountHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetAccountHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetAccountHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearAccountHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearAccountHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearAccountHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearAccountHistory(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetWwwAuthToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetWwwAuthToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetWwwAuthToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetWwwAuthToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SubmitVoucher_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SubmitVoucher(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SubmitVoucher",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SubmitVoucher(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/UpdateDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateDevice(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ListDevices(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRemoval)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/RemoveDevice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveDevice(ctx, req.(*DeviceRemoval))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetWireguardRotationInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(durationpb.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetWireguardRotationInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetWireguardRotationInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetWireguardRotationInterval(ctx, req.(*durationpb.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ResetWireguardRotationInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ResetWireguardRotationInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ResetWireguardRotationInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ResetWireguardRotationInterval(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RotateWireguardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RotateWireguardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/RotateWireguardKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RotateWireguardKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetWireguardKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetWireguardKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetWireguardKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetWireguardKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CreateCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CreateCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/CreateCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CreateCustomList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_DeleteCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).DeleteCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/DeleteCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).DeleteCustomList(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateCustomList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateCustomList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/UpdateCustomList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateCustomList(ctx, req.(*CustomList))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearCustomLists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearCustomLists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearCustomLists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearCustomLists(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewAccessMethodSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/AddApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddApiAccessMethod(ctx, req.(*NewAccessMethodSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/RemoveApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveApiAccessMethod(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetApiAccessMethod(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_UpdateApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccessMethodSetting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).UpdateApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/UpdateApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).UpdateApiAccessMethod(ctx, req.(*AccessMethodSetting))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearCustomApiAccessMethods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearCustomApiAccessMethods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearCustomApiAccessMethods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearCustomApiAccessMethods(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetCurrentApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetCurrentApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetCurrentApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetCurrentApiAccessMethod(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_TestCustomApiAccessMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CustomProxy)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).TestCustomApiAccessMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/TestCustomApiAccessMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).TestCustomApiAccessMethod(ctx, req.(*CustomProxy))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_TestApiAccessMethodById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UUID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).TestApiAccessMethodById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/TestApiAccessMethodById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).TestApiAccessMethodById(ctx, req.(*UUID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetSplitTunnelProcesses_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManagementServiceServer).GetSplitTunnelProcesses(m, &managementServiceGetSplitTunnelProcessesServer{stream})
}

type ManagementService_GetSplitTunnelProcessesServer interface {
	Send(*wrapperspb.Int32Value) error
	grpc.ServerStream
}

type managementServiceGetSplitTunnelProcessesServer struct {
	grpc.ServerStream
}

func (x *managementServiceGetSplitTunnelProcessesServer) Send(m *wrapperspb.Int32Value) error {
	return x.ServerStream.SendMsg(m)
}

func _ManagementService_AddSplitTunnelProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSplitTunnelProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/AddSplitTunnelProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSplitTunnelProcess(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveSplitTunnelProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveSplitTunnelProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/RemoveSplitTunnelProcess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveSplitTunnelProcess(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearSplitTunnelProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearSplitTunnelProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearSplitTunnelProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearSplitTunnelProcesses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_AddSplitTunnelApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).AddSplitTunnelApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/AddSplitTunnelApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).AddSplitTunnelApp(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_RemoveSplitTunnelApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).RemoveSplitTunnelApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/RemoveSplitTunnelApp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).RemoveSplitTunnelApp(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ClearSplitTunnelApps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ClearSplitTunnelApps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ClearSplitTunnelApps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ClearSplitTunnelApps(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_SetSplitTunnelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).SetSplitTunnelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/SetSplitTunnelState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).SetSplitTunnelState(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_GetExcludedProcesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).GetExcludedProcesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/GetExcludedProcesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).GetExcludedProcesses(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_CheckVolumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).CheckVolumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/CheckVolumes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).CheckVolumes(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ApplyJsonSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ApplyJsonSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ApplyJsonSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ApplyJsonSettings(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManagementService_ExportJsonSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServiceServer).ExportJsonSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mullvad_daemon.management_interface.ManagementService/ExportJsonSettings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServiceServer).ExportJsonSettings(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ManagementService_ServiceDesc is the grpc.ServiceDesc for ManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mullvad_daemon.management_interface.ManagementService",
	HandlerType: (*ManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConnectTunnel",
			Handler:    _ManagementService_ConnectTunnel_Handler,
		},
		{
			MethodName: "DisconnectTunnel",
			Handler:    _ManagementService_DisconnectTunnel_Handler,
		},
		{
			MethodName: "ReconnectTunnel",
			Handler:    _ManagementService_ReconnectTunnel_Handler,
		},
		{
			MethodName: "GetTunnelState",
			Handler:    _ManagementService_GetTunnelState_Handler,
		},
		{
			MethodName: "PrepareRestart",
			Handler:    _ManagementService_PrepareRestart_Handler,
		},
		{
			MethodName: "FactoryReset",
			Handler:    _ManagementService_FactoryReset_Handler,
		},
		{
			MethodName: "GetCurrentVersion",
			Handler:    _ManagementService_GetCurrentVersion_Handler,
		},
		{
			MethodName: "GetVersionInfo",
			Handler:    _ManagementService_GetVersionInfo_Handler,
		},
		{
			MethodName: "IsPerformingPostUpgrade",
			Handler:    _ManagementService_IsPerformingPostUpgrade_Handler,
		},
		{
			MethodName: "UpdateRelayLocations",
			Handler:    _ManagementService_UpdateRelayLocations_Handler,
		},
		{
			MethodName: "GetRelayLocations",
			Handler:    _ManagementService_GetRelayLocations_Handler,
		},
		{
			MethodName: "SetRelaySettings",
			Handler:    _ManagementService_SetRelaySettings_Handler,
		},
		{
			MethodName: "SetBridgeSettings",
			Handler:    _ManagementService_SetBridgeSettings_Handler,
		},
		{
			MethodName: "SetBridgeState",
			Handler:    _ManagementService_SetBridgeState_Handler,
		},
		{
			MethodName: "SetObfuscationSettings",
			Handler:    _ManagementService_SetObfuscationSettings_Handler,
		},
		{
			MethodName: "GetSettings",
			Handler:    _ManagementService_GetSettings_Handler,
		},
		{
			MethodName: "SetAllowLan",
			Handler:    _ManagementService_SetAllowLan_Handler,
		},
		{
			MethodName: "SetShowBetaReleases",
			Handler:    _ManagementService_SetShowBetaReleases_Handler,
		},
		{
			MethodName: "SetBlockWhenDisconnected",
			Handler:    _ManagementService_SetBlockWhenDisconnected_Handler,
		},
		{
			MethodName: "SetAutoConnect",
			Handler:    _ManagementService_SetAutoConnect_Handler,
		},
		{
			MethodName: "SetOpenvpnMssfix",
			Handler:    _ManagementService_SetOpenvpnMssfix_Handler,
		},
		{
			MethodName: "SetWireguardMtu",
			Handler:    _ManagementService_SetWireguardMtu_Handler,
		},
		{
			MethodName: "SetEnableIpv6",
			Handler:    _ManagementService_SetEnableIpv6_Handler,
		},
		{
			MethodName: "SetQuantumResistantTunnel",
			Handler:    _ManagementService_SetQuantumResistantTunnel_Handler,
		},
		{
			MethodName: "SetDaitaSettings",
			Handler:    _ManagementService_SetDaitaSettings_Handler,
		},
		{
			MethodName: "SetDnsOptions",
			Handler:    _ManagementService_SetDnsOptions_Handler,
		},
		{
			MethodName: "SetRelayOverride",
			Handler:    _ManagementService_SetRelayOverride_Handler,
		},
		{
			MethodName: "ClearAllRelayOverrides",
			Handler:    _ManagementService_ClearAllRelayOverrides_Handler,
		},
		{
			MethodName: "CreateNewAccount",
			Handler:    _ManagementService_CreateNewAccount_Handler,
		},
		{
			MethodName: "LoginAccount",
			Handler:    _ManagementService_LoginAccount_Handler,
		},
		{
			MethodName: "LogoutAccount",
			Handler:    _ManagementService_LogoutAccount_Handler,
		},
		{
			MethodName: "GetAccountData",
			Handler:    _ManagementService_GetAccountData_Handler,
		},
		{
			MethodName: "GetAccountHistory",
			Handler:    _ManagementService_GetAccountHistory_Handler,
		},
		{
			MethodName: "ClearAccountHistory",
			Handler:    _ManagementService_ClearAccountHistory_Handler,
		},
		{
			MethodName: "GetWwwAuthToken",
			Handler:    _ManagementService_GetWwwAuthToken_Handler,
		},
		{
			MethodName: "SubmitVoucher",
			Handler:    _ManagementService_SubmitVoucher_Handler,
		},
		{
			MethodName: "GetDevice",
			Handler:    _ManagementService_GetDevice_Handler,
		},
		{
			MethodName: "UpdateDevice",
			Handler:    _ManagementService_UpdateDevice_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _ManagementService_ListDevices_Handler,
		},
		{
			MethodName: "RemoveDevice",
			Handler:    _ManagementService_RemoveDevice_Handler,
		},
		{
			MethodName: "SetWireguardRotationInterval",
			Handler:    _ManagementService_SetWireguardRotationInterval_Handler,
		},
		{
			MethodName: "ResetWireguardRotationInterval",
			Handler:    _ManagementService_ResetWireguardRotationInterval_Handler,
		},
		{
			MethodName: "RotateWireguardKey",
			Handler:    _ManagementService_RotateWireguardKey_Handler,
		},
		{
			MethodName: "GetWireguardKey",
			Handler:    _ManagementService_GetWireguardKey_Handler,
		},
		{
			MethodName: "CreateCustomList",
			Handler:    _ManagementService_CreateCustomList_Handler,
		},
		{
			MethodName: "DeleteCustomList",
			Handler:    _ManagementService_DeleteCustomList_Handler,
		},
		{
			MethodName: "UpdateCustomList",
			Handler:    _ManagementService_UpdateCustomList_Handler,
		},
		{
			MethodName: "ClearCustomLists",
			Handler:    _ManagementService_ClearCustomLists_Handler,
		},
		{
			MethodName: "AddApiAccessMethod",
			Handler:    _ManagementService_AddApiAccessMethod_Handler,
		},
		{
			MethodName: "RemoveApiAccessMethod",
			Handler:    _ManagementService_RemoveApiAccessMethod_Handler,
		},
		{
			MethodName: "SetApiAccessMethod",
			Handler:    _ManagementService_SetApiAccessMethod_Handler,
		},
		{
			MethodName: "UpdateApiAccessMethod",
			Handler:    _ManagementService_UpdateApiAccessMethod_Handler,
		},
		{
			MethodName: "ClearCustomApiAccessMethods",
			Handler:    _ManagementService_ClearCustomApiAccessMethods_Handler,
		},
		{
			MethodName: "GetCurrentApiAccessMethod",
			Handler:    _ManagementService_GetCurrentApiAccessMethod_Handler,
		},
		{
			MethodName: "TestCustomApiAccessMethod",
			Handler:    _ManagementService_TestCustomApiAccessMethod_Handler,
		},
		{
			MethodName: "TestApiAccessMethodById",
			Handler:    _ManagementService_TestApiAccessMethodById_Handler,
		},
		{
			MethodName: "AddSplitTunnelProcess",
			Handler:    _ManagementService_AddSplitTunnelProcess_Handler,
		},
		{
			MethodName: "RemoveSplitTunnelProcess",
			Handler:    _ManagementService_RemoveSplitTunnelProcess_Handler,
		},
		{
			MethodName: "ClearSplitTunnelProcesses",
			Handler:    _ManagementService_ClearSplitTunnelProcesses_Handler,
		},
		{
			MethodName: "AddSplitTunnelApp",
			Handler:    _ManagementService_AddSplitTunnelApp_Handler,
		},
		{
			MethodName: "RemoveSplitTunnelApp",
			Handler:    _ManagementService_RemoveSplitTunnelApp_Handler,
		},
		{
			MethodName: "ClearSplitTunnelApps",
			Handler:    _ManagementService_ClearSplitTunnelApps_Handler,
		},
		{
			MethodName: "SetSplitTunnelState",
			Handler:    _ManagementService_SetSplitTunnelState_Handler,
		},
		{
			MethodName: "GetExcludedProcesses",
			Handler:    _ManagementService_GetExcludedProcesses_Handler,
		},
		{
			MethodName: "CheckVolumes",
			Handler:    _ManagementService_CheckVolumes_Handler,
		},
		{
			MethodName: "ApplyJsonSettings",
			Handler:    _ManagementService_ApplyJsonSettings_Handler,
		},
		{
			MethodName: "ExportJsonSettings",
			Handler:    _ManagementService_ExportJsonSettings_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventsListen",
			Handler:       _ManagementService_EventsListen_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSplitTunnelProcesses",
			Handler:       _ManagementService_GetSplitTunnelProcesses_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "management_interface.proto",
}
