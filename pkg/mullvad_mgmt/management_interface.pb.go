// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.15.8
// source: management_interface.proto

package mullvad_mgmt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AfterDisconnect int32

const (
	AfterDisconnect_NOTHING   AfterDisconnect = 0
	AfterDisconnect_BLOCK     AfterDisconnect = 1
	AfterDisconnect_RECONNECT AfterDisconnect = 2
)

// Enum value maps for AfterDisconnect.
var (
	AfterDisconnect_name = map[int32]string{
		0: "NOTHING",
		1: "BLOCK",
		2: "RECONNECT",
	}
	AfterDisconnect_value = map[string]int32{
		"NOTHING":   0,
		"BLOCK":     1,
		"RECONNECT": 2,
	}
)

func (x AfterDisconnect) Enum() *AfterDisconnect {
	p := new(AfterDisconnect)
	*p = x
	return p
}

func (x AfterDisconnect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AfterDisconnect) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[0].Descriptor()
}

func (AfterDisconnect) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[0]
}

func (x AfterDisconnect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AfterDisconnect.Descriptor instead.
func (AfterDisconnect) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{0}
}

type TunnelType int32

const (
	TunnelType_OPENVPN   TunnelType = 0
	TunnelType_WIREGUARD TunnelType = 1
)

// Enum value maps for TunnelType.
var (
	TunnelType_name = map[int32]string{
		0: "OPENVPN",
		1: "WIREGUARD",
	}
	TunnelType_value = map[string]int32{
		"OPENVPN":   0,
		"WIREGUARD": 1,
	}
)

func (x TunnelType) Enum() *TunnelType {
	p := new(TunnelType)
	*p = x
	return p
}

func (x TunnelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TunnelType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[1].Descriptor()
}

func (TunnelType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[1]
}

func (x TunnelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TunnelType.Descriptor instead.
func (TunnelType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{1}
}

type ObfuscationType int32

const (
	ObfuscationType_UDP2TCP ObfuscationType = 0
)

// Enum value maps for ObfuscationType.
var (
	ObfuscationType_name = map[int32]string{
		0: "UDP2TCP",
	}
	ObfuscationType_value = map[string]int32{
		"UDP2TCP": 0,
	}
)

func (x ObfuscationType) Enum() *ObfuscationType {
	p := new(ObfuscationType)
	*p = x
	return p
}

func (x ObfuscationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObfuscationType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[2].Descriptor()
}

func (ObfuscationType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[2]
}

func (x ObfuscationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObfuscationType.Descriptor instead.
func (ObfuscationType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{2}
}

type ProxyType int32

const (
	ProxyType_SHADOWSOCKS ProxyType = 0
	ProxyType_CUSTOM      ProxyType = 1
)

// Enum value maps for ProxyType.
var (
	ProxyType_name = map[int32]string{
		0: "SHADOWSOCKS",
		1: "CUSTOM",
	}
	ProxyType_value = map[string]int32{
		"SHADOWSOCKS": 0,
		"CUSTOM":      1,
	}
)

func (x ProxyType) Enum() *ProxyType {
	p := new(ProxyType)
	*p = x
	return p
}

func (x ProxyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProxyType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[3].Descriptor()
}

func (ProxyType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[3]
}

func (x ProxyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProxyType.Descriptor instead.
func (ProxyType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{3}
}

type Ownership int32

const (
	Ownership_ANY           Ownership = 0
	Ownership_MULLVAD_OWNED Ownership = 1
	Ownership_RENTED        Ownership = 2
)

// Enum value maps for Ownership.
var (
	Ownership_name = map[int32]string{
		0: "ANY",
		1: "MULLVAD_OWNED",
		2: "RENTED",
	}
	Ownership_value = map[string]int32{
		"ANY":           0,
		"MULLVAD_OWNED": 1,
		"RENTED":        2,
	}
)

func (x Ownership) Enum() *Ownership {
	p := new(Ownership)
	*p = x
	return p
}

func (x Ownership) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ownership) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[4].Descriptor()
}

func (Ownership) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[4]
}

func (x Ownership) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Ownership.Descriptor instead.
func (Ownership) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4}
}

type IpVersion int32

const (
	IpVersion_V4 IpVersion = 0
	IpVersion_V6 IpVersion = 1
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "V4",
		1: "V6",
	}
	IpVersion_value = map[string]int32{
		"V4": 0,
		"V6": 1,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[5].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[5]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5}
}

type TransportProtocol int32

const (
	TransportProtocol_UDP TransportProtocol = 0
	TransportProtocol_TCP TransportProtocol = 1
)

// Enum value maps for TransportProtocol.
var (
	TransportProtocol_name = map[int32]string{
		0: "UDP",
		1: "TCP",
	}
	TransportProtocol_value = map[string]int32{
		"UDP": 0,
		"TCP": 1,
	}
)

func (x TransportProtocol) Enum() *TransportProtocol {
	p := new(TransportProtocol)
	*p = x
	return p
}

func (x TransportProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TransportProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[6].Descriptor()
}

func (TransportProtocol) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[6]
}

func (x TransportProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TransportProtocol.Descriptor instead.
func (TransportProtocol) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{6}
}

type ErrorState_Cause int32

const (
	ErrorState_AUTH_FAILED               ErrorState_Cause = 0
	ErrorState_IPV6_UNAVAILABLE          ErrorState_Cause = 1
	ErrorState_SET_FIREWALL_POLICY_ERROR ErrorState_Cause = 2
	ErrorState_SET_DNS_ERROR             ErrorState_Cause = 3
	ErrorState_START_TUNNEL_ERROR        ErrorState_Cause = 4
	ErrorState_CREATE_TUNNEL_DEVICE      ErrorState_Cause = 5
	ErrorState_TUNNEL_PARAMETER_ERROR    ErrorState_Cause = 6
	ErrorState_IS_OFFLINE                ErrorState_Cause = 7
	ErrorState_VPN_PERMISSION_DENIED     ErrorState_Cause = 8
	ErrorState_SPLIT_TUNNEL_ERROR        ErrorState_Cause = 9
)

// Enum value maps for ErrorState_Cause.
var (
	ErrorState_Cause_name = map[int32]string{
		0: "AUTH_FAILED",
		1: "IPV6_UNAVAILABLE",
		2: "SET_FIREWALL_POLICY_ERROR",
		3: "SET_DNS_ERROR",
		4: "START_TUNNEL_ERROR",
		5: "CREATE_TUNNEL_DEVICE",
		6: "TUNNEL_PARAMETER_ERROR",
		7: "IS_OFFLINE",
		8: "VPN_PERMISSION_DENIED",
		9: "SPLIT_TUNNEL_ERROR",
	}
	ErrorState_Cause_value = map[string]int32{
		"AUTH_FAILED":               0,
		"IPV6_UNAVAILABLE":          1,
		"SET_FIREWALL_POLICY_ERROR": 2,
		"SET_DNS_ERROR":             3,
		"START_TUNNEL_ERROR":        4,
		"CREATE_TUNNEL_DEVICE":      5,
		"TUNNEL_PARAMETER_ERROR":    6,
		"IS_OFFLINE":                7,
		"VPN_PERMISSION_DENIED":     8,
		"SPLIT_TUNNEL_ERROR":        9,
	}
)

func (x ErrorState_Cause) Enum() *ErrorState_Cause {
	p := new(ErrorState_Cause)
	*p = x
	return p
}

func (x ErrorState_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorState_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[7].Descriptor()
}

func (ErrorState_Cause) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[7]
}

func (x ErrorState_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorState_Cause.Descriptor instead.
func (ErrorState_Cause) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4, 0}
}

type ErrorState_AuthFailedError int32

const (
	ErrorState_UNKNOWN              ErrorState_AuthFailedError = 0
	ErrorState_INVALID_ACCOUNT      ErrorState_AuthFailedError = 1
	ErrorState_EXPIRED_ACCOUNT      ErrorState_AuthFailedError = 2
	ErrorState_TOO_MANY_CONNECTIONS ErrorState_AuthFailedError = 3
)

// Enum value maps for ErrorState_AuthFailedError.
var (
	ErrorState_AuthFailedError_name = map[int32]string{
		0: "UNKNOWN",
		1: "INVALID_ACCOUNT",
		2: "EXPIRED_ACCOUNT",
		3: "TOO_MANY_CONNECTIONS",
	}
	ErrorState_AuthFailedError_value = map[string]int32{
		"UNKNOWN":              0,
		"INVALID_ACCOUNT":      1,
		"EXPIRED_ACCOUNT":      2,
		"TOO_MANY_CONNECTIONS": 3,
	}
)

func (x ErrorState_AuthFailedError) Enum() *ErrorState_AuthFailedError {
	p := new(ErrorState_AuthFailedError)
	*p = x
	return p
}

func (x ErrorState_AuthFailedError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorState_AuthFailedError) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[8].Descriptor()
}

func (ErrorState_AuthFailedError) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[8]
}

func (x ErrorState_AuthFailedError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorState_AuthFailedError.Descriptor instead.
func (ErrorState_AuthFailedError) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4, 1}
}

type ErrorState_GenerationError int32

const (
	ErrorState_NO_MATCHING_RELAY                   ErrorState_GenerationError = 0
	ErrorState_NO_MATCHING_BRIDGE_RELAY            ErrorState_GenerationError = 1
	ErrorState_NO_WIREGUARD_KEY                    ErrorState_GenerationError = 2
	ErrorState_CUSTOM_TUNNEL_HOST_RESOLUTION_ERROR ErrorState_GenerationError = 3
)

// Enum value maps for ErrorState_GenerationError.
var (
	ErrorState_GenerationError_name = map[int32]string{
		0: "NO_MATCHING_RELAY",
		1: "NO_MATCHING_BRIDGE_RELAY",
		2: "NO_WIREGUARD_KEY",
		3: "CUSTOM_TUNNEL_HOST_RESOLUTION_ERROR",
	}
	ErrorState_GenerationError_value = map[string]int32{
		"NO_MATCHING_RELAY":                   0,
		"NO_MATCHING_BRIDGE_RELAY":            1,
		"NO_WIREGUARD_KEY":                    2,
		"CUSTOM_TUNNEL_HOST_RESOLUTION_ERROR": 3,
	}
)

func (x ErrorState_GenerationError) Enum() *ErrorState_GenerationError {
	p := new(ErrorState_GenerationError)
	*p = x
	return p
}

func (x ErrorState_GenerationError) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorState_GenerationError) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[9].Descriptor()
}

func (ErrorState_GenerationError) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[9]
}

func (x ErrorState_GenerationError) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorState_GenerationError.Descriptor instead.
func (ErrorState_GenerationError) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4, 2}
}

type ErrorState_FirewallPolicyError_ErrorType int32

const (
	ErrorState_FirewallPolicyError_GENERIC ErrorState_FirewallPolicyError_ErrorType = 0
	ErrorState_FirewallPolicyError_LOCKED  ErrorState_FirewallPolicyError_ErrorType = 1
)

// Enum value maps for ErrorState_FirewallPolicyError_ErrorType.
var (
	ErrorState_FirewallPolicyError_ErrorType_name = map[int32]string{
		0: "GENERIC",
		1: "LOCKED",
	}
	ErrorState_FirewallPolicyError_ErrorType_value = map[string]int32{
		"GENERIC": 0,
		"LOCKED":  1,
	}
)

func (x ErrorState_FirewallPolicyError_ErrorType) Enum() *ErrorState_FirewallPolicyError_ErrorType {
	p := new(ErrorState_FirewallPolicyError_ErrorType)
	*p = x
	return p
}

func (x ErrorState_FirewallPolicyError_ErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorState_FirewallPolicyError_ErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[10].Descriptor()
}

func (ErrorState_FirewallPolicyError_ErrorType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[10]
}

func (x ErrorState_FirewallPolicyError_ErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorState_FirewallPolicyError_ErrorType.Descriptor instead.
func (ErrorState_FirewallPolicyError_ErrorType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4, 0, 0}
}

type BridgeSettings_BridgeType int32

const (
	BridgeSettings_NORMAL BridgeSettings_BridgeType = 0
	BridgeSettings_CUSTOM BridgeSettings_BridgeType = 1
)

// Enum value maps for BridgeSettings_BridgeType.
var (
	BridgeSettings_BridgeType_name = map[int32]string{
		0: "NORMAL",
		1: "CUSTOM",
	}
	BridgeSettings_BridgeType_value = map[string]int32{
		"NORMAL": 0,
		"CUSTOM": 1,
	}
)

func (x BridgeSettings_BridgeType) Enum() *BridgeSettings_BridgeType {
	p := new(BridgeSettings_BridgeType)
	*p = x
	return p
}

func (x BridgeSettings_BridgeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeSettings_BridgeType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[11].Descriptor()
}

func (BridgeSettings_BridgeType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[11]
}

func (x BridgeSettings_BridgeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeSettings_BridgeType.Descriptor instead.
func (BridgeSettings_BridgeType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{13, 0}
}

type BridgeState_State int32

const (
	BridgeState_AUTO BridgeState_State = 0
	BridgeState_ON   BridgeState_State = 1
	BridgeState_OFF  BridgeState_State = 2
)

// Enum value maps for BridgeState_State.
var (
	BridgeState_State_name = map[int32]string{
		0: "AUTO",
		1: "ON",
		2: "OFF",
	}
	BridgeState_State_value = map[string]int32{
		"AUTO": 0,
		"ON":   1,
		"OFF":  2,
	}
)

func (x BridgeState_State) Enum() *BridgeState_State {
	p := new(BridgeState_State)
	*p = x
	return p
}

func (x BridgeState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BridgeState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[12].Descriptor()
}

func (BridgeState_State) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[12]
}

func (x BridgeState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BridgeState_State.Descriptor instead.
func (BridgeState_State) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{16, 0}
}

type ObfuscationSettings_SelectedObfuscation int32

const (
	ObfuscationSettings_AUTO    ObfuscationSettings_SelectedObfuscation = 0
	ObfuscationSettings_OFF     ObfuscationSettings_SelectedObfuscation = 1
	ObfuscationSettings_UDP2TCP ObfuscationSettings_SelectedObfuscation = 2
)

// Enum value maps for ObfuscationSettings_SelectedObfuscation.
var (
	ObfuscationSettings_SelectedObfuscation_name = map[int32]string{
		0: "AUTO",
		1: "OFF",
		2: "UDP2TCP",
	}
	ObfuscationSettings_SelectedObfuscation_value = map[string]int32{
		"AUTO":    0,
		"OFF":     1,
		"UDP2TCP": 2,
	}
)

func (x ObfuscationSettings_SelectedObfuscation) Enum() *ObfuscationSettings_SelectedObfuscation {
	p := new(ObfuscationSettings_SelectedObfuscation)
	*p = x
	return p
}

func (x ObfuscationSettings_SelectedObfuscation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObfuscationSettings_SelectedObfuscation) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[13].Descriptor()
}

func (ObfuscationSettings_SelectedObfuscation) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[13]
}

func (x ObfuscationSettings_SelectedObfuscation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObfuscationSettings_SelectedObfuscation.Descriptor instead.
func (ObfuscationSettings_SelectedObfuscation) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{18, 0}
}

type QuantumResistantState_State int32

const (
	QuantumResistantState_AUTO QuantumResistantState_State = 0
	QuantumResistantState_ON   QuantumResistantState_State = 1
	QuantumResistantState_OFF  QuantumResistantState_State = 2
)

// Enum value maps for QuantumResistantState_State.
var (
	QuantumResistantState_State_name = map[int32]string{
		0: "AUTO",
		1: "ON",
		2: "OFF",
	}
	QuantumResistantState_State_value = map[string]int32{
		"AUTO": 0,
		"ON":   1,
		"OFF":  2,
	}
)

func (x QuantumResistantState_State) Enum() *QuantumResistantState_State {
	p := new(QuantumResistantState_State)
	*p = x
	return p
}

func (x QuantumResistantState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QuantumResistantState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[14].Descriptor()
}

func (QuantumResistantState_State) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[14]
}

func (x QuantumResistantState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QuantumResistantState_State.Descriptor instead.
func (QuantumResistantState_State) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{40, 0}
}

type DnsOptions_DnsState int32

const (
	DnsOptions_DEFAULT DnsOptions_DnsState = 0
	DnsOptions_CUSTOM  DnsOptions_DnsState = 1
)

// Enum value maps for DnsOptions_DnsState.
var (
	DnsOptions_DnsState_name = map[int32]string{
		0: "DEFAULT",
		1: "CUSTOM",
	}
	DnsOptions_DnsState_value = map[string]int32{
		"DEFAULT": 0,
		"CUSTOM":  1,
	}
)

func (x DnsOptions_DnsState) Enum() *DnsOptions_DnsState {
	p := new(DnsOptions_DnsState)
	*p = x
	return p
}

func (x DnsOptions_DnsState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DnsOptions_DnsState) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[15].Descriptor()
}

func (DnsOptions_DnsState) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[15]
}

func (x DnsOptions_DnsState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DnsOptions_DnsState.Descriptor instead.
func (DnsOptions_DnsState) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{45, 0}
}

type Relay_RelayType int32

const (
	Relay_OPENVPN   Relay_RelayType = 0
	Relay_BRIDGE    Relay_RelayType = 1
	Relay_WIREGUARD Relay_RelayType = 2
)

// Enum value maps for Relay_RelayType.
var (
	Relay_RelayType_name = map[int32]string{
		0: "OPENVPN",
		1: "BRIDGE",
		2: "WIREGUARD",
	}
	Relay_RelayType_value = map[string]int32{
		"OPENVPN":   0,
		"BRIDGE":    1,
		"WIREGUARD": 2,
	}
)

func (x Relay_RelayType) Enum() *Relay_RelayType {
	p := new(Relay_RelayType)
	*p = x
	return p
}

func (x Relay_RelayType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Relay_RelayType) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[16].Descriptor()
}

func (Relay_RelayType) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[16]
}

func (x Relay_RelayType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Relay_RelayType.Descriptor instead.
func (Relay_RelayType) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{52, 0}
}

type DeviceState_State int32

const (
	DeviceState_LOGGED_IN  DeviceState_State = 0
	DeviceState_LOGGED_OUT DeviceState_State = 1
	DeviceState_REVOKED    DeviceState_State = 2
)

// Enum value maps for DeviceState_State.
var (
	DeviceState_State_name = map[int32]string{
		0: "LOGGED_IN",
		1: "LOGGED_OUT",
		2: "REVOKED",
	}
	DeviceState_State_value = map[string]int32{
		"LOGGED_IN":  0,
		"LOGGED_OUT": 1,
		"REVOKED":    2,
	}
)

func (x DeviceState_State) Enum() *DeviceState_State {
	p := new(DeviceState_State)
	*p = x
	return p
}

func (x DeviceState_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceState_State) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[17].Descriptor()
}

func (DeviceState_State) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[17]
}

func (x DeviceState_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceState_State.Descriptor instead.
func (DeviceState_State) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{67, 0}
}

type DeviceEvent_Cause int32

const (
	DeviceEvent_LOGGED_IN   DeviceEvent_Cause = 0
	DeviceEvent_LOGGED_OUT  DeviceEvent_Cause = 1
	DeviceEvent_REVOKED     DeviceEvent_Cause = 2
	DeviceEvent_UPDATED     DeviceEvent_Cause = 3
	DeviceEvent_ROTATED_KEY DeviceEvent_Cause = 4
)

// Enum value maps for DeviceEvent_Cause.
var (
	DeviceEvent_Cause_name = map[int32]string{
		0: "LOGGED_IN",
		1: "LOGGED_OUT",
		2: "REVOKED",
		3: "UPDATED",
		4: "ROTATED_KEY",
	}
	DeviceEvent_Cause_value = map[string]int32{
		"LOGGED_IN":   0,
		"LOGGED_OUT":  1,
		"REVOKED":     2,
		"UPDATED":     3,
		"ROTATED_KEY": 4,
	}
)

func (x DeviceEvent_Cause) Enum() *DeviceEvent_Cause {
	p := new(DeviceEvent_Cause)
	*p = x
	return p
}

func (x DeviceEvent_Cause) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceEvent_Cause) Descriptor() protoreflect.EnumDescriptor {
	return file_management_interface_proto_enumTypes[18].Descriptor()
}

func (DeviceEvent_Cause) Type() protoreflect.EnumType {
	return &file_management_interface_proto_enumTypes[18]
}

func (x DeviceEvent_Cause) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceEvent_Cause.Descriptor instead.
func (DeviceEvent_Cause) EnumDescriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{68, 0}
}

type UUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *UUID) Reset() {
	*x = UUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUID) ProtoMessage() {}

func (x *UUID) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUID.ProtoReflect.Descriptor instead.
func (*UUID) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{0}
}

func (x *UUID) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type AccountData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Expiry *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (x *AccountData) Reset() {
	*x = AccountData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountData) ProtoMessage() {}

func (x *AccountData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountData.ProtoReflect.Descriptor instead.
func (*AccountData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{1}
}

func (x *AccountData) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AccountData) GetExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.Expiry
	}
	return nil
}

type AccountHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AccountHistory) Reset() {
	*x = AccountHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountHistory) ProtoMessage() {}

func (x *AccountHistory) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountHistory.ProtoReflect.Descriptor instead.
func (*AccountHistory) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{2}
}

func (x *AccountHistory) GetToken() *wrapperspb.StringValue {
	if x != nil {
		return x.Token
	}
	return nil
}

type VoucherSubmission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecondsAdded uint64                 `protobuf:"varint,1,opt,name=seconds_added,json=secondsAdded,proto3" json:"seconds_added,omitempty"`
	NewExpiry    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=new_expiry,json=newExpiry,proto3" json:"new_expiry,omitempty"`
}

func (x *VoucherSubmission) Reset() {
	*x = VoucherSubmission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoucherSubmission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoucherSubmission) ProtoMessage() {}

func (x *VoucherSubmission) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoucherSubmission.ProtoReflect.Descriptor instead.
func (*VoucherSubmission) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{3}
}

func (x *VoucherSubmission) GetSecondsAdded() uint64 {
	if x != nil {
		return x.SecondsAdded
	}
	return 0
}

func (x *VoucherSubmission) GetNewExpiry() *timestamppb.Timestamp {
	if x != nil {
		return x.NewExpiry
	}
	return nil
}

type ErrorState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause         ErrorState_Cause                `protobuf:"varint,1,opt,name=cause,proto3,enum=mullvad_daemon.management_interface.ErrorState_Cause" json:"cause,omitempty"`
	BlockingError *ErrorState_FirewallPolicyError `protobuf:"bytes,2,opt,name=blocking_error,json=blockingError,proto3" json:"blocking_error,omitempty"`
	// AUTH_FAILED
	AuthFailedError ErrorState_AuthFailedError `protobuf:"varint,3,opt,name=auth_failed_error,json=authFailedError,proto3,enum=mullvad_daemon.management_interface.ErrorState_AuthFailedError" json:"auth_failed_error,omitempty"`
	// TUNNEL_PARAMETER_ERROR
	ParameterError ErrorState_GenerationError `protobuf:"varint,4,opt,name=parameter_error,json=parameterError,proto3,enum=mullvad_daemon.management_interface.ErrorState_GenerationError" json:"parameter_error,omitempty"`
	// SET_FIREWALL_POLICY_ERROR
	PolicyError *ErrorState_FirewallPolicyError `protobuf:"bytes,5,opt,name=policy_error,json=policyError,proto3" json:"policy_error,omitempty"`
	// CREATE_TUNNEL_DEVICE
	CreateTunnelError *int32 `protobuf:"varint,6,opt,name=create_tunnel_error,json=createTunnelError,proto3,oneof" json:"create_tunnel_error,omitempty"`
}

func (x *ErrorState) Reset() {
	*x = ErrorState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorState) ProtoMessage() {}

func (x *ErrorState) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorState.ProtoReflect.Descriptor instead.
func (*ErrorState) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4}
}

func (x *ErrorState) GetCause() ErrorState_Cause {
	if x != nil {
		return x.Cause
	}
	return ErrorState_AUTH_FAILED
}

func (x *ErrorState) GetBlockingError() *ErrorState_FirewallPolicyError {
	if x != nil {
		return x.BlockingError
	}
	return nil
}

func (x *ErrorState) GetAuthFailedError() ErrorState_AuthFailedError {
	if x != nil {
		return x.AuthFailedError
	}
	return ErrorState_UNKNOWN
}

func (x *ErrorState) GetParameterError() ErrorState_GenerationError {
	if x != nil {
		return x.ParameterError
	}
	return ErrorState_NO_MATCHING_RELAY
}

func (x *ErrorState) GetPolicyError() *ErrorState_FirewallPolicyError {
	if x != nil {
		return x.PolicyError
	}
	return nil
}

func (x *ErrorState) GetCreateTunnelError() int32 {
	if x != nil && x.CreateTunnelError != nil {
		return *x.CreateTunnelError
	}
	return 0
}

type TunnelState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to State:
	//
	//	*TunnelState_Disconnected_
	//	*TunnelState_Connecting_
	//	*TunnelState_Connected_
	//	*TunnelState_Disconnecting_
	//	*TunnelState_Error_
	State isTunnelState_State `protobuf_oneof:"state"`
}

func (x *TunnelState) Reset() {
	*x = TunnelState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState) ProtoMessage() {}

func (x *TunnelState) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState.ProtoReflect.Descriptor instead.
func (*TunnelState) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5}
}

func (m *TunnelState) GetState() isTunnelState_State {
	if m != nil {
		return m.State
	}
	return nil
}

func (x *TunnelState) GetDisconnected() *TunnelState_Disconnected {
	if x, ok := x.GetState().(*TunnelState_Disconnected_); ok {
		return x.Disconnected
	}
	return nil
}

func (x *TunnelState) GetConnecting() *TunnelState_Connecting {
	if x, ok := x.GetState().(*TunnelState_Connecting_); ok {
		return x.Connecting
	}
	return nil
}

func (x *TunnelState) GetConnected() *TunnelState_Connected {
	if x, ok := x.GetState().(*TunnelState_Connected_); ok {
		return x.Connected
	}
	return nil
}

func (x *TunnelState) GetDisconnecting() *TunnelState_Disconnecting {
	if x, ok := x.GetState().(*TunnelState_Disconnecting_); ok {
		return x.Disconnecting
	}
	return nil
}

func (x *TunnelState) GetError() *TunnelState_Error {
	if x, ok := x.GetState().(*TunnelState_Error_); ok {
		return x.Error
	}
	return nil
}

type isTunnelState_State interface {
	isTunnelState_State()
}

type TunnelState_Disconnected_ struct {
	Disconnected *TunnelState_Disconnected `protobuf:"bytes,1,opt,name=disconnected,proto3,oneof"`
}

type TunnelState_Connecting_ struct {
	Connecting *TunnelState_Connecting `protobuf:"bytes,2,opt,name=connecting,proto3,oneof"`
}

type TunnelState_Connected_ struct {
	Connected *TunnelState_Connected `protobuf:"bytes,3,opt,name=connected,proto3,oneof"`
}

type TunnelState_Disconnecting_ struct {
	Disconnecting *TunnelState_Disconnecting `protobuf:"bytes,4,opt,name=disconnecting,proto3,oneof"`
}

type TunnelState_Error_ struct {
	Error *TunnelState_Error `protobuf:"bytes,5,opt,name=error,proto3,oneof"`
}

func (*TunnelState_Disconnected_) isTunnelState_State() {}

func (*TunnelState_Connecting_) isTunnelState_State() {}

func (*TunnelState_Connected_) isTunnelState_State() {}

func (*TunnelState_Disconnecting_) isTunnelState_State() {}

func (*TunnelState_Error_) isTunnelState_State() {}

type TunnelStateRelayInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelEndpoint *TunnelEndpoint `protobuf:"bytes,1,opt,name=tunnel_endpoint,json=tunnelEndpoint,proto3" json:"tunnel_endpoint,omitempty"`
	Location       *GeoIpLocation  `protobuf:"bytes,2,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TunnelStateRelayInfo) Reset() {
	*x = TunnelStateRelayInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelStateRelayInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelStateRelayInfo) ProtoMessage() {}

func (x *TunnelStateRelayInfo) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelStateRelayInfo.ProtoReflect.Descriptor instead.
func (*TunnelStateRelayInfo) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{6}
}

func (x *TunnelStateRelayInfo) GetTunnelEndpoint() *TunnelEndpoint {
	if x != nil {
		return x.TunnelEndpoint
	}
	return nil
}

func (x *TunnelStateRelayInfo) GetLocation() *GeoIpLocation {
	if x != nil {
		return x.Location
	}
	return nil
}

type TunnelEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address          string               `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Protocol         TransportProtocol    `protobuf:"varint,2,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
	TunnelType       TunnelType           `protobuf:"varint,3,opt,name=tunnel_type,json=tunnelType,proto3,enum=mullvad_daemon.management_interface.TunnelType" json:"tunnel_type,omitempty"`
	QuantumResistant bool                 `protobuf:"varint,4,opt,name=quantum_resistant,json=quantumResistant,proto3" json:"quantum_resistant,omitempty"`
	Proxy            *ProxyEndpoint       `protobuf:"bytes,5,opt,name=proxy,proto3" json:"proxy,omitempty"`
	Obfuscation      *ObfuscationEndpoint `protobuf:"bytes,6,opt,name=obfuscation,proto3" json:"obfuscation,omitempty"`
	EntryEndpoint    *Endpoint            `protobuf:"bytes,7,opt,name=entry_endpoint,json=entryEndpoint,proto3" json:"entry_endpoint,omitempty"`
	TunnelMetadata   *TunnelMetadata      `protobuf:"bytes,8,opt,name=tunnel_metadata,json=tunnelMetadata,proto3" json:"tunnel_metadata,omitempty"`
	Daita            bool                 `protobuf:"varint,9,opt,name=daita,proto3" json:"daita,omitempty"`
}

func (x *TunnelEndpoint) Reset() {
	*x = TunnelEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelEndpoint) ProtoMessage() {}

func (x *TunnelEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelEndpoint.ProtoReflect.Descriptor instead.
func (*TunnelEndpoint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{7}
}

func (x *TunnelEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *TunnelEndpoint) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

func (x *TunnelEndpoint) GetTunnelType() TunnelType {
	if x != nil {
		return x.TunnelType
	}
	return TunnelType_OPENVPN
}

func (x *TunnelEndpoint) GetQuantumResistant() bool {
	if x != nil {
		return x.QuantumResistant
	}
	return false
}

func (x *TunnelEndpoint) GetProxy() *ProxyEndpoint {
	if x != nil {
		return x.Proxy
	}
	return nil
}

func (x *TunnelEndpoint) GetObfuscation() *ObfuscationEndpoint {
	if x != nil {
		return x.Obfuscation
	}
	return nil
}

func (x *TunnelEndpoint) GetEntryEndpoint() *Endpoint {
	if x != nil {
		return x.EntryEndpoint
	}
	return nil
}

func (x *TunnelEndpoint) GetTunnelMetadata() *TunnelMetadata {
	if x != nil {
		return x.TunnelMetadata
	}
	return nil
}

func (x *TunnelEndpoint) GetDaita() bool {
	if x != nil {
		return x.Daita
	}
	return false
}

type ObfuscationEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address         string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Port            uint32            `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Protocol        TransportProtocol `protobuf:"varint,3,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
	ObfuscationType ObfuscationType   `protobuf:"varint,4,opt,name=obfuscation_type,json=obfuscationType,proto3,enum=mullvad_daemon.management_interface.ObfuscationType" json:"obfuscation_type,omitempty"`
}

func (x *ObfuscationEndpoint) Reset() {
	*x = ObfuscationEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfuscationEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfuscationEndpoint) ProtoMessage() {}

func (x *ObfuscationEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfuscationEndpoint.ProtoReflect.Descriptor instead.
func (*ObfuscationEndpoint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{8}
}

func (x *ObfuscationEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ObfuscationEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ObfuscationEndpoint) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

func (x *ObfuscationEndpoint) GetObfuscationType() ObfuscationType {
	if x != nil {
		return x.ObfuscationType
	}
	return ObfuscationType_UDP2TCP
}

type Endpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Protocol TransportProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
}

func (x *Endpoint) Reset() {
	*x = Endpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Endpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Endpoint) ProtoMessage() {}

func (x *Endpoint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Endpoint.ProtoReflect.Descriptor instead.
func (*Endpoint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{9}
}

func (x *Endpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Endpoint) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

type ProxyEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Protocol  TransportProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
	ProxyType ProxyType         `protobuf:"varint,3,opt,name=proxy_type,json=proxyType,proto3,enum=mullvad_daemon.management_interface.ProxyType" json:"proxy_type,omitempty"`
}

func (x *ProxyEndpoint) Reset() {
	*x = ProxyEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyEndpoint) ProtoMessage() {}

func (x *ProxyEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyEndpoint.ProtoReflect.Descriptor instead.
func (*ProxyEndpoint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{10}
}

func (x *ProxyEndpoint) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ProxyEndpoint) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

func (x *ProxyEndpoint) GetProxyType() ProxyType {
	if x != nil {
		return x.ProxyType
	}
	return ProxyType_SHADOWSOCKS
}

type GeoIpLocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ipv4               *string `protobuf:"bytes,1,opt,name=ipv4,proto3,oneof" json:"ipv4,omitempty"`
	Ipv6               *string `protobuf:"bytes,2,opt,name=ipv6,proto3,oneof" json:"ipv6,omitempty"`
	Country            string  `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	City               *string `protobuf:"bytes,4,opt,name=city,proto3,oneof" json:"city,omitempty"`
	Latitude           float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude          float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
	MullvadExitIp      bool    `protobuf:"varint,7,opt,name=mullvad_exit_ip,json=mullvadExitIp,proto3" json:"mullvad_exit_ip,omitempty"`
	Hostname           *string `protobuf:"bytes,8,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
	BridgeHostname     *string `protobuf:"bytes,9,opt,name=bridge_hostname,json=bridgeHostname,proto3,oneof" json:"bridge_hostname,omitempty"`
	EntryHostname      *string `protobuf:"bytes,10,opt,name=entry_hostname,json=entryHostname,proto3,oneof" json:"entry_hostname,omitempty"`
	ObfuscatorHostname *string `protobuf:"bytes,11,opt,name=obfuscator_hostname,json=obfuscatorHostname,proto3,oneof" json:"obfuscator_hostname,omitempty"`
}

func (x *GeoIpLocation) Reset() {
	*x = GeoIpLocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIpLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIpLocation) ProtoMessage() {}

func (x *GeoIpLocation) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIpLocation.ProtoReflect.Descriptor instead.
func (*GeoIpLocation) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{11}
}

func (x *GeoIpLocation) GetIpv4() string {
	if x != nil && x.Ipv4 != nil {
		return *x.Ipv4
	}
	return ""
}

func (x *GeoIpLocation) GetIpv6() string {
	if x != nil && x.Ipv6 != nil {
		return *x.Ipv6
	}
	return ""
}

func (x *GeoIpLocation) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeoIpLocation) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *GeoIpLocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoIpLocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoIpLocation) GetMullvadExitIp() bool {
	if x != nil {
		return x.MullvadExitIp
	}
	return false
}

func (x *GeoIpLocation) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

func (x *GeoIpLocation) GetBridgeHostname() string {
	if x != nil && x.BridgeHostname != nil {
		return *x.BridgeHostname
	}
	return ""
}

func (x *GeoIpLocation) GetEntryHostname() string {
	if x != nil && x.EntryHostname != nil {
		return *x.EntryHostname
	}
	return ""
}

func (x *GeoIpLocation) GetObfuscatorHostname() string {
	if x != nil && x.ObfuscatorHostname != nil {
		return *x.ObfuscatorHostname
	}
	return ""
}

type TunnelMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelInterface string `protobuf:"bytes,1,opt,name=tunnel_interface,json=tunnelInterface,proto3" json:"tunnel_interface,omitempty"`
}

func (x *TunnelMetadata) Reset() {
	*x = TunnelMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMetadata) ProtoMessage() {}

func (x *TunnelMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMetadata.ProtoReflect.Descriptor instead.
func (*TunnelMetadata) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{12}
}

func (x *TunnelMetadata) GetTunnelInterface() string {
	if x != nil {
		return x.TunnelInterface
	}
	return ""
}

type BridgeSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BridgeType BridgeSettings_BridgeType         `protobuf:"varint,1,opt,name=bridge_type,json=bridgeType,proto3,enum=mullvad_daemon.management_interface.BridgeSettings_BridgeType" json:"bridge_type,omitempty"`
	Normal     *BridgeSettings_BridgeConstraints `protobuf:"bytes,2,opt,name=normal,proto3" json:"normal,omitempty"`
	Custom     *CustomProxy                      `protobuf:"bytes,3,opt,name=custom,proto3" json:"custom,omitempty"`
}

func (x *BridgeSettings) Reset() {
	*x = BridgeSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeSettings) ProtoMessage() {}

func (x *BridgeSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeSettings.ProtoReflect.Descriptor instead.
func (*BridgeSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{13}
}

func (x *BridgeSettings) GetBridgeType() BridgeSettings_BridgeType {
	if x != nil {
		return x.BridgeType
	}
	return BridgeSettings_NORMAL
}

func (x *BridgeSettings) GetNormal() *BridgeSettings_BridgeConstraints {
	if x != nil {
		return x.Normal
	}
	return nil
}

func (x *BridgeSettings) GetCustom() *CustomProxy {
	if x != nil {
		return x.Custom
	}
	return nil
}

type LocationConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*LocationConstraint_CustomList
	//	*LocationConstraint_Location
	Type isLocationConstraint_Type `protobuf_oneof:"type"`
}

func (x *LocationConstraint) Reset() {
	*x = LocationConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocationConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocationConstraint) ProtoMessage() {}

func (x *LocationConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocationConstraint.ProtoReflect.Descriptor instead.
func (*LocationConstraint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{14}
}

func (m *LocationConstraint) GetType() isLocationConstraint_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *LocationConstraint) GetCustomList() string {
	if x, ok := x.GetType().(*LocationConstraint_CustomList); ok {
		return x.CustomList
	}
	return ""
}

func (x *LocationConstraint) GetLocation() *GeographicLocationConstraint {
	if x, ok := x.GetType().(*LocationConstraint_Location); ok {
		return x.Location
	}
	return nil
}

type isLocationConstraint_Type interface {
	isLocationConstraint_Type()
}

type LocationConstraint_CustomList struct {
	CustomList string `protobuf:"bytes,1,opt,name=custom_list,json=customList,proto3,oneof"`
}

type LocationConstraint_Location struct {
	Location *GeographicLocationConstraint `protobuf:"bytes,2,opt,name=location,proto3,oneof"`
}

func (*LocationConstraint_CustomList) isLocationConstraint_Type() {}

func (*LocationConstraint_Location) isLocationConstraint_Type() {}

type GeographicLocationConstraint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country  string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	City     *string `protobuf:"bytes,2,opt,name=city,proto3,oneof" json:"city,omitempty"`
	Hostname *string `protobuf:"bytes,3,opt,name=hostname,proto3,oneof" json:"hostname,omitempty"`
}

func (x *GeographicLocationConstraint) Reset() {
	*x = GeographicLocationConstraint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeographicLocationConstraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeographicLocationConstraint) ProtoMessage() {}

func (x *GeographicLocationConstraint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeographicLocationConstraint.ProtoReflect.Descriptor instead.
func (*GeographicLocationConstraint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{15}
}

func (x *GeographicLocationConstraint) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *GeographicLocationConstraint) GetCity() string {
	if x != nil && x.City != nil {
		return *x.City
	}
	return ""
}

func (x *GeographicLocationConstraint) GetHostname() string {
	if x != nil && x.Hostname != nil {
		return *x.Hostname
	}
	return ""
}

type BridgeState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State BridgeState_State `protobuf:"varint,1,opt,name=state,proto3,enum=mullvad_daemon.management_interface.BridgeState_State" json:"state,omitempty"`
}

func (x *BridgeState) Reset() {
	*x = BridgeState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeState) ProtoMessage() {}

func (x *BridgeState) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeState.ProtoReflect.Descriptor instead.
func (*BridgeState) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{16}
}

func (x *BridgeState) GetState() BridgeState_State {
	if x != nil {
		return x.State
	}
	return BridgeState_AUTO
}

type Udp2TcpObfuscationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *uint32 `protobuf:"varint,1,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *Udp2TcpObfuscationSettings) Reset() {
	*x = Udp2TcpObfuscationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Udp2TcpObfuscationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Udp2TcpObfuscationSettings) ProtoMessage() {}

func (x *Udp2TcpObfuscationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Udp2TcpObfuscationSettings.ProtoReflect.Descriptor instead.
func (*Udp2TcpObfuscationSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{17}
}

func (x *Udp2TcpObfuscationSettings) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type ObfuscationSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelectedObfuscation ObfuscationSettings_SelectedObfuscation `protobuf:"varint,1,opt,name=selected_obfuscation,json=selectedObfuscation,proto3,enum=mullvad_daemon.management_interface.ObfuscationSettings_SelectedObfuscation" json:"selected_obfuscation,omitempty"`
	Udp2Tcp             *Udp2TcpObfuscationSettings             `protobuf:"bytes,2,opt,name=udp2tcp,proto3" json:"udp2tcp,omitempty"`
}

func (x *ObfuscationSettings) Reset() {
	*x = ObfuscationSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfuscationSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfuscationSettings) ProtoMessage() {}

func (x *ObfuscationSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfuscationSettings.ProtoReflect.Descriptor instead.
func (*ObfuscationSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{18}
}

func (x *ObfuscationSettings) GetSelectedObfuscation() ObfuscationSettings_SelectedObfuscation {
	if x != nil {
		return x.SelectedObfuscation
	}
	return ObfuscationSettings_AUTO
}

func (x *ObfuscationSettings) GetUdp2Tcp() *Udp2TcpObfuscationSettings {
	if x != nil {
		return x.Udp2Tcp
	}
	return nil
}

type CustomList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Locations []*GeographicLocationConstraint `protobuf:"bytes,3,rep,name=locations,proto3" json:"locations,omitempty"`
}

func (x *CustomList) Reset() {
	*x = CustomList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomList) ProtoMessage() {}

func (x *CustomList) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomList.ProtoReflect.Descriptor instead.
func (*CustomList) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{19}
}

func (x *CustomList) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CustomList) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CustomList) GetLocations() []*GeographicLocationConstraint {
	if x != nil {
		return x.Locations
	}
	return nil
}

type CustomListSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomLists []*CustomList `protobuf:"bytes,1,rep,name=custom_lists,json=customLists,proto3" json:"custom_lists,omitempty"`
}

func (x *CustomListSettings) Reset() {
	*x = CustomListSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomListSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomListSettings) ProtoMessage() {}

func (x *CustomListSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomListSettings.ProtoReflect.Descriptor instead.
func (*CustomListSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{20}
}

func (x *CustomListSettings) GetCustomLists() []*CustomList {
	if x != nil {
		return x.CustomLists
	}
	return nil
}

type Socks5Local struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RemoteIp                string            `protobuf:"bytes,1,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	RemotePort              uint32            `protobuf:"varint,2,opt,name=remote_port,json=remotePort,proto3" json:"remote_port,omitempty"`
	RemoteTransportProtocol TransportProtocol `protobuf:"varint,3,opt,name=remote_transport_protocol,json=remoteTransportProtocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"remote_transport_protocol,omitempty"`
	LocalPort               uint32            `protobuf:"varint,4,opt,name=local_port,json=localPort,proto3" json:"local_port,omitempty"`
}

func (x *Socks5Local) Reset() {
	*x = Socks5Local{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socks5Local) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks5Local) ProtoMessage() {}

func (x *Socks5Local) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socks5Local.ProtoReflect.Descriptor instead.
func (*Socks5Local) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{21}
}

func (x *Socks5Local) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

func (x *Socks5Local) GetRemotePort() uint32 {
	if x != nil {
		return x.RemotePort
	}
	return 0
}

func (x *Socks5Local) GetRemoteTransportProtocol() TransportProtocol {
	if x != nil {
		return x.RemoteTransportProtocol
	}
	return TransportProtocol_UDP
}

func (x *Socks5Local) GetLocalPort() uint32 {
	if x != nil {
		return x.LocalPort
	}
	return 0
}

type SocksAuth struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *SocksAuth) Reset() {
	*x = SocksAuth{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SocksAuth) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SocksAuth) ProtoMessage() {}

func (x *SocksAuth) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SocksAuth.ProtoReflect.Descriptor instead.
func (*SocksAuth) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{22}
}

func (x *SocksAuth) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SocksAuth) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Socks5Remote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string     `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port uint32     `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Auth *SocksAuth `protobuf:"bytes,3,opt,name=auth,proto3" json:"auth,omitempty"`
}

func (x *Socks5Remote) Reset() {
	*x = Socks5Remote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socks5Remote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks5Remote) ProtoMessage() {}

func (x *Socks5Remote) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socks5Remote.ProtoReflect.Descriptor instead.
func (*Socks5Remote) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{23}
}

func (x *Socks5Remote) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Socks5Remote) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Socks5Remote) GetAuth() *SocksAuth {
	if x != nil {
		return x.Auth
	}
	return nil
}

type Shadowsocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port     uint32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Cipher   string `protobuf:"bytes,4,opt,name=cipher,proto3" json:"cipher,omitempty"`
}

func (x *Shadowsocks) Reset() {
	*x = Shadowsocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shadowsocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocks) ProtoMessage() {}

func (x *Shadowsocks) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadowsocks.ProtoReflect.Descriptor instead.
func (*Shadowsocks) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{24}
}

func (x *Shadowsocks) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Shadowsocks) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Shadowsocks) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Shadowsocks) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

type CustomProxy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProxyMethod:
	//
	//	*CustomProxy_Socks5Local
	//	*CustomProxy_Socks5Remote
	//	*CustomProxy_Shadowsocks
	ProxyMethod isCustomProxy_ProxyMethod `protobuf_oneof:"proxy_method"`
}

func (x *CustomProxy) Reset() {
	*x = CustomProxy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomProxy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomProxy) ProtoMessage() {}

func (x *CustomProxy) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomProxy.ProtoReflect.Descriptor instead.
func (*CustomProxy) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{25}
}

func (m *CustomProxy) GetProxyMethod() isCustomProxy_ProxyMethod {
	if m != nil {
		return m.ProxyMethod
	}
	return nil
}

func (x *CustomProxy) GetSocks5Local() *Socks5Local {
	if x, ok := x.GetProxyMethod().(*CustomProxy_Socks5Local); ok {
		return x.Socks5Local
	}
	return nil
}

func (x *CustomProxy) GetSocks5Remote() *Socks5Remote {
	if x, ok := x.GetProxyMethod().(*CustomProxy_Socks5Remote); ok {
		return x.Socks5Remote
	}
	return nil
}

func (x *CustomProxy) GetShadowsocks() *Shadowsocks {
	if x, ok := x.GetProxyMethod().(*CustomProxy_Shadowsocks); ok {
		return x.Shadowsocks
	}
	return nil
}

type isCustomProxy_ProxyMethod interface {
	isCustomProxy_ProxyMethod()
}

type CustomProxy_Socks5Local struct {
	Socks5Local *Socks5Local `protobuf:"bytes,1,opt,name=socks5local,proto3,oneof"`
}

type CustomProxy_Socks5Remote struct {
	Socks5Remote *Socks5Remote `protobuf:"bytes,2,opt,name=socks5remote,proto3,oneof"`
}

type CustomProxy_Shadowsocks struct {
	Shadowsocks *Shadowsocks `protobuf:"bytes,3,opt,name=shadowsocks,proto3,oneof"`
}

func (*CustomProxy_Socks5Local) isCustomProxy_ProxyMethod() {}

func (*CustomProxy_Socks5Remote) isCustomProxy_ProxyMethod() {}

func (*CustomProxy_Shadowsocks) isCustomProxy_ProxyMethod() {}

type AccessMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AccessMethod:
	//
	//	*AccessMethod_Direct_
	//	*AccessMethod_Bridges_
	//	*AccessMethod_Custom
	AccessMethod isAccessMethod_AccessMethod `protobuf_oneof:"access_method"`
}

func (x *AccessMethod) Reset() {
	*x = AccessMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessMethod) ProtoMessage() {}

func (x *AccessMethod) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessMethod.ProtoReflect.Descriptor instead.
func (*AccessMethod) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{26}
}

func (m *AccessMethod) GetAccessMethod() isAccessMethod_AccessMethod {
	if m != nil {
		return m.AccessMethod
	}
	return nil
}

func (x *AccessMethod) GetDirect() *AccessMethod_Direct {
	if x, ok := x.GetAccessMethod().(*AccessMethod_Direct_); ok {
		return x.Direct
	}
	return nil
}

func (x *AccessMethod) GetBridges() *AccessMethod_Bridges {
	if x, ok := x.GetAccessMethod().(*AccessMethod_Bridges_); ok {
		return x.Bridges
	}
	return nil
}

func (x *AccessMethod) GetCustom() *CustomProxy {
	if x, ok := x.GetAccessMethod().(*AccessMethod_Custom); ok {
		return x.Custom
	}
	return nil
}

type isAccessMethod_AccessMethod interface {
	isAccessMethod_AccessMethod()
}

type AccessMethod_Direct_ struct {
	Direct *AccessMethod_Direct `protobuf:"bytes,1,opt,name=direct,proto3,oneof"`
}

type AccessMethod_Bridges_ struct {
	Bridges *AccessMethod_Bridges `protobuf:"bytes,2,opt,name=bridges,proto3,oneof"`
}

type AccessMethod_Custom struct {
	Custom *CustomProxy `protobuf:"bytes,3,opt,name=custom,proto3,oneof"`
}

func (*AccessMethod_Direct_) isAccessMethod_AccessMethod() {}

func (*AccessMethod_Bridges_) isAccessMethod_AccessMethod() {}

func (*AccessMethod_Custom) isAccessMethod_AccessMethod() {}

type AccessMethodSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           *UUID         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name         string        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Enabled      bool          `protobuf:"varint,3,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessMethod *AccessMethod `protobuf:"bytes,4,opt,name=access_method,json=accessMethod,proto3" json:"access_method,omitempty"`
}

func (x *AccessMethodSetting) Reset() {
	*x = AccessMethodSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessMethodSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessMethodSetting) ProtoMessage() {}

func (x *AccessMethodSetting) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessMethodSetting.ProtoReflect.Descriptor instead.
func (*AccessMethodSetting) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{27}
}

func (x *AccessMethodSetting) GetId() *UUID {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *AccessMethodSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AccessMethodSetting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AccessMethodSetting) GetAccessMethod() *AccessMethod {
	if x != nil {
		return x.AccessMethod
	}
	return nil
}

type NewAccessMethodSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Enabled      bool          `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AccessMethod *AccessMethod `protobuf:"bytes,3,opt,name=access_method,json=accessMethod,proto3" json:"access_method,omitempty"`
}

func (x *NewAccessMethodSetting) Reset() {
	*x = NewAccessMethodSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewAccessMethodSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewAccessMethodSetting) ProtoMessage() {}

func (x *NewAccessMethodSetting) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewAccessMethodSetting.ProtoReflect.Descriptor instead.
func (*NewAccessMethodSetting) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{28}
}

func (x *NewAccessMethodSetting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewAccessMethodSetting) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *NewAccessMethodSetting) GetAccessMethod() *AccessMethod {
	if x != nil {
		return x.AccessMethod
	}
	return nil
}

type ApiAccessMethodSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direct         *AccessMethodSetting   `protobuf:"bytes,1,opt,name=direct,proto3" json:"direct,omitempty"`
	MullvadBridges *AccessMethodSetting   `protobuf:"bytes,2,opt,name=mullvad_bridges,json=mullvadBridges,proto3" json:"mullvad_bridges,omitempty"`
	Custom         []*AccessMethodSetting `protobuf:"bytes,3,rep,name=custom,proto3" json:"custom,omitempty"`
}

func (x *ApiAccessMethodSettings) Reset() {
	*x = ApiAccessMethodSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApiAccessMethodSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApiAccessMethodSettings) ProtoMessage() {}

func (x *ApiAccessMethodSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApiAccessMethodSettings.ProtoReflect.Descriptor instead.
func (*ApiAccessMethodSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{29}
}

func (x *ApiAccessMethodSettings) GetDirect() *AccessMethodSetting {
	if x != nil {
		return x.Direct
	}
	return nil
}

func (x *ApiAccessMethodSettings) GetMullvadBridges() *AccessMethodSetting {
	if x != nil {
		return x.MullvadBridges
	}
	return nil
}

func (x *ApiAccessMethodSettings) GetCustom() []*AccessMethodSetting {
	if x != nil {
		return x.Custom
	}
	return nil
}

type Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelaySettings         *RelaySettings           `protobuf:"bytes,1,opt,name=relay_settings,json=relaySettings,proto3" json:"relay_settings,omitempty"`
	BridgeSettings        *BridgeSettings          `protobuf:"bytes,2,opt,name=bridge_settings,json=bridgeSettings,proto3" json:"bridge_settings,omitempty"`
	BridgeState           *BridgeState             `protobuf:"bytes,3,opt,name=bridge_state,json=bridgeState,proto3" json:"bridge_state,omitempty"`
	AllowLan              bool                     `protobuf:"varint,4,opt,name=allow_lan,json=allowLan,proto3" json:"allow_lan,omitempty"`
	BlockWhenDisconnected bool                     `protobuf:"varint,5,opt,name=block_when_disconnected,json=blockWhenDisconnected,proto3" json:"block_when_disconnected,omitempty"`
	AutoConnect           bool                     `protobuf:"varint,6,opt,name=auto_connect,json=autoConnect,proto3" json:"auto_connect,omitempty"`
	TunnelOptions         *TunnelOptions           `protobuf:"bytes,7,opt,name=tunnel_options,json=tunnelOptions,proto3" json:"tunnel_options,omitempty"`
	ShowBetaReleases      bool                     `protobuf:"varint,8,opt,name=show_beta_releases,json=showBetaReleases,proto3" json:"show_beta_releases,omitempty"`
	SplitTunnel           *SplitTunnelSettings     `protobuf:"bytes,9,opt,name=split_tunnel,json=splitTunnel,proto3" json:"split_tunnel,omitempty"`
	ObfuscationSettings   *ObfuscationSettings     `protobuf:"bytes,10,opt,name=obfuscation_settings,json=obfuscationSettings,proto3" json:"obfuscation_settings,omitempty"`
	CustomLists           *CustomListSettings      `protobuf:"bytes,11,opt,name=custom_lists,json=customLists,proto3" json:"custom_lists,omitempty"`
	ApiAccessMethods      *ApiAccessMethodSettings `protobuf:"bytes,12,opt,name=api_access_methods,json=apiAccessMethods,proto3" json:"api_access_methods,omitempty"`
	RelayOverrides        []*RelayOverride         `protobuf:"bytes,13,rep,name=relay_overrides,json=relayOverrides,proto3" json:"relay_overrides,omitempty"`
}

func (x *Settings) Reset() {
	*x = Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settings) ProtoMessage() {}

func (x *Settings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settings.ProtoReflect.Descriptor instead.
func (*Settings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{30}
}

func (x *Settings) GetRelaySettings() *RelaySettings {
	if x != nil {
		return x.RelaySettings
	}
	return nil
}

func (x *Settings) GetBridgeSettings() *BridgeSettings {
	if x != nil {
		return x.BridgeSettings
	}
	return nil
}

func (x *Settings) GetBridgeState() *BridgeState {
	if x != nil {
		return x.BridgeState
	}
	return nil
}

func (x *Settings) GetAllowLan() bool {
	if x != nil {
		return x.AllowLan
	}
	return false
}

func (x *Settings) GetBlockWhenDisconnected() bool {
	if x != nil {
		return x.BlockWhenDisconnected
	}
	return false
}

func (x *Settings) GetAutoConnect() bool {
	if x != nil {
		return x.AutoConnect
	}
	return false
}

func (x *Settings) GetTunnelOptions() *TunnelOptions {
	if x != nil {
		return x.TunnelOptions
	}
	return nil
}

func (x *Settings) GetShowBetaReleases() bool {
	if x != nil {
		return x.ShowBetaReleases
	}
	return false
}

func (x *Settings) GetSplitTunnel() *SplitTunnelSettings {
	if x != nil {
		return x.SplitTunnel
	}
	return nil
}

func (x *Settings) GetObfuscationSettings() *ObfuscationSettings {
	if x != nil {
		return x.ObfuscationSettings
	}
	return nil
}

func (x *Settings) GetCustomLists() *CustomListSettings {
	if x != nil {
		return x.CustomLists
	}
	return nil
}

func (x *Settings) GetApiAccessMethods() *ApiAccessMethodSettings {
	if x != nil {
		return x.ApiAccessMethods
	}
	return nil
}

func (x *Settings) GetRelayOverrides() []*RelayOverride {
	if x != nil {
		return x.RelayOverrides
	}
	return nil
}

type RelayOverride struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname   string  `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4AddrIn *string `protobuf:"bytes,2,opt,name=ipv4_addr_in,json=ipv4AddrIn,proto3,oneof" json:"ipv4_addr_in,omitempty"`
	Ipv6AddrIn *string `protobuf:"bytes,3,opt,name=ipv6_addr_in,json=ipv6AddrIn,proto3,oneof" json:"ipv6_addr_in,omitempty"`
}

func (x *RelayOverride) Reset() {
	*x = RelayOverride{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayOverride) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayOverride) ProtoMessage() {}

func (x *RelayOverride) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayOverride.ProtoReflect.Descriptor instead.
func (*RelayOverride) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{31}
}

func (x *RelayOverride) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *RelayOverride) GetIpv4AddrIn() string {
	if x != nil && x.Ipv4AddrIn != nil {
		return *x.Ipv4AddrIn
	}
	return ""
}

func (x *RelayOverride) GetIpv6AddrIn() string {
	if x != nil && x.Ipv6AddrIn != nil {
		return *x.Ipv6AddrIn
	}
	return ""
}

type SplitTunnelSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableExclusions bool     `protobuf:"varint,1,opt,name=enable_exclusions,json=enableExclusions,proto3" json:"enable_exclusions,omitempty"`
	Apps             []string `protobuf:"bytes,2,rep,name=apps,proto3" json:"apps,omitempty"`
}

func (x *SplitTunnelSettings) Reset() {
	*x = SplitTunnelSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTunnelSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTunnelSettings) ProtoMessage() {}

func (x *SplitTunnelSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTunnelSettings.ProtoReflect.Descriptor instead.
func (*SplitTunnelSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{32}
}

func (x *SplitTunnelSettings) GetEnableExclusions() bool {
	if x != nil {
		return x.EnableExclusions
	}
	return false
}

func (x *SplitTunnelSettings) GetApps() []string {
	if x != nil {
		return x.Apps
	}
	return nil
}

type RelaySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Endpoint:
	//
	//	*RelaySettings_Custom
	//	*RelaySettings_Normal
	Endpoint isRelaySettings_Endpoint `protobuf_oneof:"endpoint"`
}

func (x *RelaySettings) Reset() {
	*x = RelaySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelaySettings) ProtoMessage() {}

func (x *RelaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelaySettings.ProtoReflect.Descriptor instead.
func (*RelaySettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{33}
}

func (m *RelaySettings) GetEndpoint() isRelaySettings_Endpoint {
	if m != nil {
		return m.Endpoint
	}
	return nil
}

func (x *RelaySettings) GetCustom() *CustomRelaySettings {
	if x, ok := x.GetEndpoint().(*RelaySettings_Custom); ok {
		return x.Custom
	}
	return nil
}

func (x *RelaySettings) GetNormal() *NormalRelaySettings {
	if x, ok := x.GetEndpoint().(*RelaySettings_Normal); ok {
		return x.Normal
	}
	return nil
}

type isRelaySettings_Endpoint interface {
	isRelaySettings_Endpoint()
}

type RelaySettings_Custom struct {
	Custom *CustomRelaySettings `protobuf:"bytes,1,opt,name=custom,proto3,oneof"`
}

type RelaySettings_Normal struct {
	Normal *NormalRelaySettings `protobuf:"bytes,2,opt,name=normal,proto3,oneof"`
}

func (*RelaySettings_Custom) isRelaySettings_Endpoint() {}

func (*RelaySettings_Normal) isRelaySettings_Endpoint() {}

type NormalRelaySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location             *LocationConstraint   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Providers            []string              `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
	TunnelType           *TunnelType           `protobuf:"varint,3,opt,name=tunnel_type,json=tunnelType,proto3,enum=mullvad_daemon.management_interface.TunnelType,oneof" json:"tunnel_type,omitempty"`
	WireguardConstraints *WireguardConstraints `protobuf:"bytes,4,opt,name=wireguard_constraints,json=wireguardConstraints,proto3" json:"wireguard_constraints,omitempty"`
	OpenvpnConstraints   *OpenvpnConstraints   `protobuf:"bytes,5,opt,name=openvpn_constraints,json=openvpnConstraints,proto3" json:"openvpn_constraints,omitempty"`
	Ownership            Ownership             `protobuf:"varint,6,opt,name=ownership,proto3,enum=mullvad_daemon.management_interface.Ownership" json:"ownership,omitempty"`
}

func (x *NormalRelaySettings) Reset() {
	*x = NormalRelaySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NormalRelaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NormalRelaySettings) ProtoMessage() {}

func (x *NormalRelaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NormalRelaySettings.ProtoReflect.Descriptor instead.
func (*NormalRelaySettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{34}
}

func (x *NormalRelaySettings) GetLocation() *LocationConstraint {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *NormalRelaySettings) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *NormalRelaySettings) GetTunnelType() TunnelType {
	if x != nil && x.TunnelType != nil {
		return *x.TunnelType
	}
	return TunnelType_OPENVPN
}

func (x *NormalRelaySettings) GetWireguardConstraints() *WireguardConstraints {
	if x != nil {
		return x.WireguardConstraints
	}
	return nil
}

func (x *NormalRelaySettings) GetOpenvpnConstraints() *OpenvpnConstraints {
	if x != nil {
		return x.OpenvpnConstraints
	}
	return nil
}

func (x *NormalRelaySettings) GetOwnership() Ownership {
	if x != nil {
		return x.Ownership
	}
	return Ownership_ANY
}

type TransportPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Protocol TransportProtocol `protobuf:"varint,1,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
	Port     *uint32           `protobuf:"varint,2,opt,name=port,proto3,oneof" json:"port,omitempty"`
}

func (x *TransportPort) Reset() {
	*x = TransportPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransportPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransportPort) ProtoMessage() {}

func (x *TransportPort) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransportPort.ProtoReflect.Descriptor instead.
func (*TransportPort) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{35}
}

func (x *TransportPort) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

func (x *TransportPort) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

type OpenvpnConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port *TransportPort `protobuf:"bytes,1,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *OpenvpnConstraints) Reset() {
	*x = OpenvpnConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenvpnConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenvpnConstraints) ProtoMessage() {}

func (x *OpenvpnConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenvpnConstraints.ProtoReflect.Descriptor instead.
func (*OpenvpnConstraints) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{36}
}

func (x *OpenvpnConstraints) GetPort() *TransportPort {
	if x != nil {
		return x.Port
	}
	return nil
}

type WireguardConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port          *uint32             `protobuf:"varint,1,opt,name=port,proto3,oneof" json:"port,omitempty"`
	IpVersion     *IpVersion          `protobuf:"varint,2,opt,name=ip_version,json=ipVersion,proto3,enum=mullvad_daemon.management_interface.IpVersion,oneof" json:"ip_version,omitempty"`
	UseMultihop   bool                `protobuf:"varint,3,opt,name=use_multihop,json=useMultihop,proto3" json:"use_multihop,omitempty"`
	EntryLocation *LocationConstraint `protobuf:"bytes,4,opt,name=entry_location,json=entryLocation,proto3" json:"entry_location,omitempty"`
}

func (x *WireguardConstraints) Reset() {
	*x = WireguardConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireguardConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardConstraints) ProtoMessage() {}

func (x *WireguardConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireguardConstraints.ProtoReflect.Descriptor instead.
func (*WireguardConstraints) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{37}
}

func (x *WireguardConstraints) GetPort() uint32 {
	if x != nil && x.Port != nil {
		return *x.Port
	}
	return 0
}

func (x *WireguardConstraints) GetIpVersion() IpVersion {
	if x != nil && x.IpVersion != nil {
		return *x.IpVersion
	}
	return IpVersion_V4
}

func (x *WireguardConstraints) GetUseMultihop() bool {
	if x != nil {
		return x.UseMultihop
	}
	return false
}

func (x *WireguardConstraints) GetEntryLocation() *LocationConstraint {
	if x != nil {
		return x.EntryLocation
	}
	return nil
}

type CustomRelaySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host   string            `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Config *ConnectionConfig `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *CustomRelaySettings) Reset() {
	*x = CustomRelaySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomRelaySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomRelaySettings) ProtoMessage() {}

func (x *CustomRelaySettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomRelaySettings.ProtoReflect.Descriptor instead.
func (*CustomRelaySettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{38}
}

func (x *CustomRelaySettings) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CustomRelaySettings) GetConfig() *ConnectionConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type ConnectionConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*ConnectionConfig_Openvpn
	//	*ConnectionConfig_Wireguard
	Config isConnectionConfig_Config `protobuf_oneof:"config"`
}

func (x *ConnectionConfig) Reset() {
	*x = ConnectionConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig) ProtoMessage() {}

func (x *ConnectionConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{39}
}

func (m *ConnectionConfig) GetConfig() isConnectionConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *ConnectionConfig) GetOpenvpn() *ConnectionConfig_OpenvpnConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_Openvpn); ok {
		return x.Openvpn
	}
	return nil
}

func (x *ConnectionConfig) GetWireguard() *ConnectionConfig_WireguardConfig {
	if x, ok := x.GetConfig().(*ConnectionConfig_Wireguard); ok {
		return x.Wireguard
	}
	return nil
}

type isConnectionConfig_Config interface {
	isConnectionConfig_Config()
}

type ConnectionConfig_Openvpn struct {
	Openvpn *ConnectionConfig_OpenvpnConfig `protobuf:"bytes,1,opt,name=openvpn,proto3,oneof"`
}

type ConnectionConfig_Wireguard struct {
	Wireguard *ConnectionConfig_WireguardConfig `protobuf:"bytes,2,opt,name=wireguard,proto3,oneof"`
}

func (*ConnectionConfig_Openvpn) isConnectionConfig_Config() {}

func (*ConnectionConfig_Wireguard) isConnectionConfig_Config() {}

type QuantumResistantState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State QuantumResistantState_State `protobuf:"varint,1,opt,name=state,proto3,enum=mullvad_daemon.management_interface.QuantumResistantState_State" json:"state,omitempty"`
}

func (x *QuantumResistantState) Reset() {
	*x = QuantumResistantState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QuantumResistantState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuantumResistantState) ProtoMessage() {}

func (x *QuantumResistantState) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuantumResistantState.ProtoReflect.Descriptor instead.
func (*QuantumResistantState) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{40}
}

func (x *QuantumResistantState) GetState() QuantumResistantState_State {
	if x != nil {
		return x.State
	}
	return QuantumResistantState_AUTO
}

type DaitaSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *DaitaSettings) Reset() {
	*x = DaitaSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaitaSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaitaSettings) ProtoMessage() {}

func (x *DaitaSettings) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaitaSettings.ProtoReflect.Descriptor instead.
func (*DaitaSettings) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{41}
}

func (x *DaitaSettings) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type TunnelOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Openvpn    *TunnelOptions_OpenvpnOptions   `protobuf:"bytes,1,opt,name=openvpn,proto3" json:"openvpn,omitempty"`
	Wireguard  *TunnelOptions_WireguardOptions `protobuf:"bytes,2,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
	Generic    *TunnelOptions_GenericOptions   `protobuf:"bytes,3,opt,name=generic,proto3" json:"generic,omitempty"`
	DnsOptions *DnsOptions                     `protobuf:"bytes,4,opt,name=dns_options,json=dnsOptions,proto3" json:"dns_options,omitempty"`
}

func (x *TunnelOptions) Reset() {
	*x = TunnelOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOptions) ProtoMessage() {}

func (x *TunnelOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOptions.ProtoReflect.Descriptor instead.
func (*TunnelOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{42}
}

func (x *TunnelOptions) GetOpenvpn() *TunnelOptions_OpenvpnOptions {
	if x != nil {
		return x.Openvpn
	}
	return nil
}

func (x *TunnelOptions) GetWireguard() *TunnelOptions_WireguardOptions {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

func (x *TunnelOptions) GetGeneric() *TunnelOptions_GenericOptions {
	if x != nil {
		return x.Generic
	}
	return nil
}

func (x *TunnelOptions) GetDnsOptions() *DnsOptions {
	if x != nil {
		return x.DnsOptions
	}
	return nil
}

type DefaultDnsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BlockAds          bool `protobuf:"varint,1,opt,name=block_ads,json=blockAds,proto3" json:"block_ads,omitempty"`
	BlockTrackers     bool `protobuf:"varint,2,opt,name=block_trackers,json=blockTrackers,proto3" json:"block_trackers,omitempty"`
	BlockMalware      bool `protobuf:"varint,3,opt,name=block_malware,json=blockMalware,proto3" json:"block_malware,omitempty"`
	BlockAdultContent bool `protobuf:"varint,4,opt,name=block_adult_content,json=blockAdultContent,proto3" json:"block_adult_content,omitempty"`
	BlockGambling     bool `protobuf:"varint,5,opt,name=block_gambling,json=blockGambling,proto3" json:"block_gambling,omitempty"`
	BlockSocialMedia  bool `protobuf:"varint,6,opt,name=block_social_media,json=blockSocialMedia,proto3" json:"block_social_media,omitempty"`
}

func (x *DefaultDnsOptions) Reset() {
	*x = DefaultDnsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefaultDnsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefaultDnsOptions) ProtoMessage() {}

func (x *DefaultDnsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefaultDnsOptions.ProtoReflect.Descriptor instead.
func (*DefaultDnsOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{43}
}

func (x *DefaultDnsOptions) GetBlockAds() bool {
	if x != nil {
		return x.BlockAds
	}
	return false
}

func (x *DefaultDnsOptions) GetBlockTrackers() bool {
	if x != nil {
		return x.BlockTrackers
	}
	return false
}

func (x *DefaultDnsOptions) GetBlockMalware() bool {
	if x != nil {
		return x.BlockMalware
	}
	return false
}

func (x *DefaultDnsOptions) GetBlockAdultContent() bool {
	if x != nil {
		return x.BlockAdultContent
	}
	return false
}

func (x *DefaultDnsOptions) GetBlockGambling() bool {
	if x != nil {
		return x.BlockGambling
	}
	return false
}

func (x *DefaultDnsOptions) GetBlockSocialMedia() bool {
	if x != nil {
		return x.BlockSocialMedia
	}
	return false
}

type CustomDnsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *CustomDnsOptions) Reset() {
	*x = CustomDnsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomDnsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomDnsOptions) ProtoMessage() {}

func (x *CustomDnsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomDnsOptions.ProtoReflect.Descriptor instead.
func (*CustomDnsOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{44}
}

func (x *CustomDnsOptions) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type DnsOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State          DnsOptions_DnsState `protobuf:"varint,1,opt,name=state,proto3,enum=mullvad_daemon.management_interface.DnsOptions_DnsState" json:"state,omitempty"`
	DefaultOptions *DefaultDnsOptions  `protobuf:"bytes,2,opt,name=default_options,json=defaultOptions,proto3" json:"default_options,omitempty"`
	CustomOptions  *CustomDnsOptions   `protobuf:"bytes,3,opt,name=custom_options,json=customOptions,proto3" json:"custom_options,omitempty"`
}

func (x *DnsOptions) Reset() {
	*x = DnsOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsOptions) ProtoMessage() {}

func (x *DnsOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsOptions.ProtoReflect.Descriptor instead.
func (*DnsOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{45}
}

func (x *DnsOptions) GetState() DnsOptions_DnsState {
	if x != nil {
		return x.State
	}
	return DnsOptions_DEFAULT
}

func (x *DnsOptions) GetDefaultOptions() *DefaultDnsOptions {
	if x != nil {
		return x.DefaultOptions
	}
	return nil
}

func (x *DnsOptions) GetCustomOptions() *CustomDnsOptions {
	if x != nil {
		return x.CustomOptions
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{46}
}

func (x *PublicKey) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PublicKey) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type ExcludedProcess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pid       uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Image     string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Inherited bool   `protobuf:"varint,3,opt,name=inherited,proto3" json:"inherited,omitempty"`
}

func (x *ExcludedProcess) Reset() {
	*x = ExcludedProcess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcludedProcess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcludedProcess) ProtoMessage() {}

func (x *ExcludedProcess) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcludedProcess.ProtoReflect.Descriptor instead.
func (*ExcludedProcess) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{47}
}

func (x *ExcludedProcess) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *ExcludedProcess) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ExcludedProcess) GetInherited() bool {
	if x != nil {
		return x.Inherited
	}
	return false
}

type ExcludedProcessList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processes []*ExcludedProcess `protobuf:"bytes,1,rep,name=processes,proto3" json:"processes,omitempty"`
}

func (x *ExcludedProcessList) Reset() {
	*x = ExcludedProcessList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExcludedProcessList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExcludedProcessList) ProtoMessage() {}

func (x *ExcludedProcessList) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExcludedProcessList.ProtoReflect.Descriptor instead.
func (*ExcludedProcessList) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{48}
}

func (x *ExcludedProcessList) GetProcesses() []*ExcludedProcess {
	if x != nil {
		return x.Processes
	}
	return nil
}

type AppVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Supported        bool    `protobuf:"varint,1,opt,name=supported,proto3" json:"supported,omitempty"`
	LatestStable     string  `protobuf:"bytes,2,opt,name=latest_stable,json=latestStable,proto3" json:"latest_stable,omitempty"`
	LatestBeta       string  `protobuf:"bytes,3,opt,name=latest_beta,json=latestBeta,proto3" json:"latest_beta,omitempty"`
	SuggestedUpgrade *string `protobuf:"bytes,4,opt,name=suggested_upgrade,json=suggestedUpgrade,proto3,oneof" json:"suggested_upgrade,omitempty"`
}

func (x *AppVersionInfo) Reset() {
	*x = AppVersionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppVersionInfo) ProtoMessage() {}

func (x *AppVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppVersionInfo.ProtoReflect.Descriptor instead.
func (*AppVersionInfo) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{49}
}

func (x *AppVersionInfo) GetSupported() bool {
	if x != nil {
		return x.Supported
	}
	return false
}

func (x *AppVersionInfo) GetLatestStable() string {
	if x != nil {
		return x.LatestStable
	}
	return ""
}

func (x *AppVersionInfo) GetLatestBeta() string {
	if x != nil {
		return x.LatestBeta
	}
	return ""
}

func (x *AppVersionInfo) GetSuggestedUpgrade() string {
	if x != nil && x.SuggestedUpgrade != nil {
		return *x.SuggestedUpgrade
	}
	return ""
}

type RelayListCountry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code   string           `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Cities []*RelayListCity `protobuf:"bytes,3,rep,name=cities,proto3" json:"cities,omitempty"`
}

func (x *RelayListCountry) Reset() {
	*x = RelayListCountry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayListCountry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayListCountry) ProtoMessage() {}

func (x *RelayListCountry) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayListCountry.ProtoReflect.Descriptor instead.
func (*RelayListCountry) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{50}
}

func (x *RelayListCountry) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelayListCountry) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RelayListCountry) GetCities() []*RelayListCity {
	if x != nil {
		return x.Cities
	}
	return nil
}

type RelayListCity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Code      string   `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	Latitude  float64  `protobuf:"fixed64,3,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64  `protobuf:"fixed64,4,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Relays    []*Relay `protobuf:"bytes,5,rep,name=relays,proto3" json:"relays,omitempty"`
}

func (x *RelayListCity) Reset() {
	*x = RelayListCity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayListCity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayListCity) ProtoMessage() {}

func (x *RelayListCity) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayListCity.ProtoReflect.Descriptor instead.
func (*RelayListCity) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{51}
}

func (x *RelayListCity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelayListCity) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RelayListCity) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *RelayListCity) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *RelayListCity) GetRelays() []*Relay {
	if x != nil {
		return x.Relays
	}
	return nil
}

type Relay struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname         string          `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ipv4AddrIn       string          `protobuf:"bytes,2,opt,name=ipv4_addr_in,json=ipv4AddrIn,proto3" json:"ipv4_addr_in,omitempty"`
	Ipv6AddrIn       *string         `protobuf:"bytes,3,opt,name=ipv6_addr_in,json=ipv6AddrIn,proto3,oneof" json:"ipv6_addr_in,omitempty"`
	IncludeInCountry bool            `protobuf:"varint,4,opt,name=include_in_country,json=includeInCountry,proto3" json:"include_in_country,omitempty"`
	Active           bool            `protobuf:"varint,5,opt,name=active,proto3" json:"active,omitempty"`
	Owned            bool            `protobuf:"varint,6,opt,name=owned,proto3" json:"owned,omitempty"`
	Provider         string          `protobuf:"bytes,7,opt,name=provider,proto3" json:"provider,omitempty"`
	Weight           uint64          `protobuf:"fixed64,8,opt,name=weight,proto3" json:"weight,omitempty"`
	EndpointType     Relay_RelayType `protobuf:"varint,9,opt,name=endpoint_type,json=endpointType,proto3,enum=mullvad_daemon.management_interface.Relay_RelayType" json:"endpoint_type,omitempty"`
	EndpointData     *anypb.Any      `protobuf:"bytes,10,opt,name=endpoint_data,json=endpointData,proto3" json:"endpoint_data,omitempty"`
	Location         *Location       `protobuf:"bytes,11,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *Relay) Reset() {
	*x = Relay{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Relay) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Relay) ProtoMessage() {}

func (x *Relay) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Relay.ProtoReflect.Descriptor instead.
func (*Relay) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{52}
}

func (x *Relay) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Relay) GetIpv4AddrIn() string {
	if x != nil {
		return x.Ipv4AddrIn
	}
	return ""
}

func (x *Relay) GetIpv6AddrIn() string {
	if x != nil && x.Ipv6AddrIn != nil {
		return *x.Ipv6AddrIn
	}
	return ""
}

func (x *Relay) GetIncludeInCountry() bool {
	if x != nil {
		return x.IncludeInCountry
	}
	return false
}

func (x *Relay) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *Relay) GetOwned() bool {
	if x != nil {
		return x.Owned
	}
	return false
}

func (x *Relay) GetProvider() string {
	if x != nil {
		return x.Provider
	}
	return ""
}

func (x *Relay) GetWeight() uint64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *Relay) GetEndpointType() Relay_RelayType {
	if x != nil {
		return x.EndpointType
	}
	return Relay_OPENVPN
}

func (x *Relay) GetEndpointData() *anypb.Any {
	if x != nil {
		return x.EndpointData
	}
	return nil
}

func (x *Relay) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type WireguardRelayEndpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Daita     bool   `protobuf:"varint,2,opt,name=daita,proto3" json:"daita,omitempty"`
}

func (x *WireguardRelayEndpointData) Reset() {
	*x = WireguardRelayEndpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireguardRelayEndpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardRelayEndpointData) ProtoMessage() {}

func (x *WireguardRelayEndpointData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireguardRelayEndpointData.ProtoReflect.Descriptor instead.
func (*WireguardRelayEndpointData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{53}
}

func (x *WireguardRelayEndpointData) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *WireguardRelayEndpointData) GetDaita() bool {
	if x != nil {
		return x.Daita
	}
	return false
}

type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Country     string  `protobuf:"bytes,1,opt,name=country,proto3" json:"country,omitempty"`
	CountryCode string  `protobuf:"bytes,2,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty"`
	City        string  `protobuf:"bytes,3,opt,name=city,proto3" json:"city,omitempty"`
	CityCode    string  `protobuf:"bytes,4,opt,name=city_code,json=cityCode,proto3" json:"city_code,omitempty"`
	Latitude    float64 `protobuf:"fixed64,5,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float64 `protobuf:"fixed64,6,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{54}
}

func (x *Location) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Location) GetCountryCode() string {
	if x != nil {
		return x.CountryCode
	}
	return ""
}

func (x *Location) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Location) GetCityCode() string {
	if x != nil {
		return x.CityCode
	}
	return ""
}

func (x *Location) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Location) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

type DaemonEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Event:
	//
	//	*DaemonEvent_TunnelState
	//	*DaemonEvent_Settings
	//	*DaemonEvent_RelayList
	//	*DaemonEvent_VersionInfo
	//	*DaemonEvent_Device
	//	*DaemonEvent_RemoveDevice
	//	*DaemonEvent_NewAccessMethod
	Event isDaemonEvent_Event `protobuf_oneof:"event"`
}

func (x *DaemonEvent) Reset() {
	*x = DaemonEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DaemonEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DaemonEvent) ProtoMessage() {}

func (x *DaemonEvent) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DaemonEvent.ProtoReflect.Descriptor instead.
func (*DaemonEvent) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{55}
}

func (m *DaemonEvent) GetEvent() isDaemonEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *DaemonEvent) GetTunnelState() *TunnelState {
	if x, ok := x.GetEvent().(*DaemonEvent_TunnelState); ok {
		return x.TunnelState
	}
	return nil
}

func (x *DaemonEvent) GetSettings() *Settings {
	if x, ok := x.GetEvent().(*DaemonEvent_Settings); ok {
		return x.Settings
	}
	return nil
}

func (x *DaemonEvent) GetRelayList() *RelayList {
	if x, ok := x.GetEvent().(*DaemonEvent_RelayList); ok {
		return x.RelayList
	}
	return nil
}

func (x *DaemonEvent) GetVersionInfo() *AppVersionInfo {
	if x, ok := x.GetEvent().(*DaemonEvent_VersionInfo); ok {
		return x.VersionInfo
	}
	return nil
}

func (x *DaemonEvent) GetDevice() *DeviceEvent {
	if x, ok := x.GetEvent().(*DaemonEvent_Device); ok {
		return x.Device
	}
	return nil
}

func (x *DaemonEvent) GetRemoveDevice() *RemoveDeviceEvent {
	if x, ok := x.GetEvent().(*DaemonEvent_RemoveDevice); ok {
		return x.RemoveDevice
	}
	return nil
}

func (x *DaemonEvent) GetNewAccessMethod() *AccessMethodSetting {
	if x, ok := x.GetEvent().(*DaemonEvent_NewAccessMethod); ok {
		return x.NewAccessMethod
	}
	return nil
}

type isDaemonEvent_Event interface {
	isDaemonEvent_Event()
}

type DaemonEvent_TunnelState struct {
	TunnelState *TunnelState `protobuf:"bytes,1,opt,name=tunnel_state,json=tunnelState,proto3,oneof"`
}

type DaemonEvent_Settings struct {
	Settings *Settings `protobuf:"bytes,2,opt,name=settings,proto3,oneof"`
}

type DaemonEvent_RelayList struct {
	RelayList *RelayList `protobuf:"bytes,3,opt,name=relay_list,json=relayList,proto3,oneof"`
}

type DaemonEvent_VersionInfo struct {
	VersionInfo *AppVersionInfo `protobuf:"bytes,4,opt,name=version_info,json=versionInfo,proto3,oneof"`
}

type DaemonEvent_Device struct {
	Device *DeviceEvent `protobuf:"bytes,5,opt,name=device,proto3,oneof"`
}

type DaemonEvent_RemoveDevice struct {
	RemoveDevice *RemoveDeviceEvent `protobuf:"bytes,6,opt,name=remove_device,json=removeDevice,proto3,oneof"`
}

type DaemonEvent_NewAccessMethod struct {
	NewAccessMethod *AccessMethodSetting `protobuf:"bytes,7,opt,name=new_access_method,json=newAccessMethod,proto3,oneof"`
}

func (*DaemonEvent_TunnelState) isDaemonEvent_Event() {}

func (*DaemonEvent_Settings) isDaemonEvent_Event() {}

func (*DaemonEvent_RelayList) isDaemonEvent_Event() {}

func (*DaemonEvent_VersionInfo) isDaemonEvent_Event() {}

func (*DaemonEvent_Device) isDaemonEvent_Event() {}

func (*DaemonEvent_RemoveDevice) isDaemonEvent_Event() {}

func (*DaemonEvent_NewAccessMethod) isDaemonEvent_Event() {}

type RelayList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Countries []*RelayListCountry    `protobuf:"bytes,1,rep,name=countries,proto3" json:"countries,omitempty"`
	Openvpn   *OpenVpnEndpointData   `protobuf:"bytes,2,opt,name=openvpn,proto3" json:"openvpn,omitempty"`
	Bridge    *BridgeEndpointData    `protobuf:"bytes,3,opt,name=bridge,proto3" json:"bridge,omitempty"`
	Wireguard *WireguardEndpointData `protobuf:"bytes,4,opt,name=wireguard,proto3" json:"wireguard,omitempty"`
}

func (x *RelayList) Reset() {
	*x = RelayList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelayList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelayList) ProtoMessage() {}

func (x *RelayList) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelayList.ProtoReflect.Descriptor instead.
func (*RelayList) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{56}
}

func (x *RelayList) GetCountries() []*RelayListCountry {
	if x != nil {
		return x.Countries
	}
	return nil
}

func (x *RelayList) GetOpenvpn() *OpenVpnEndpointData {
	if x != nil {
		return x.Openvpn
	}
	return nil
}

func (x *RelayList) GetBridge() *BridgeEndpointData {
	if x != nil {
		return x.Bridge
	}
	return nil
}

func (x *RelayList) GetWireguard() *WireguardEndpointData {
	if x != nil {
		return x.Wireguard
	}
	return nil
}

type OpenVpnEndpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoints []*OpenVpnEndpoint `protobuf:"bytes,1,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
}

func (x *OpenVpnEndpointData) Reset() {
	*x = OpenVpnEndpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenVpnEndpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenVpnEndpointData) ProtoMessage() {}

func (x *OpenVpnEndpointData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenVpnEndpointData.ProtoReflect.Descriptor instead.
func (*OpenVpnEndpointData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{57}
}

func (x *OpenVpnEndpointData) GetEndpoints() []*OpenVpnEndpoint {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type OpenVpnEndpoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     uint32            `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Protocol TransportProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
}

func (x *OpenVpnEndpoint) Reset() {
	*x = OpenVpnEndpoint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenVpnEndpoint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenVpnEndpoint) ProtoMessage() {}

func (x *OpenVpnEndpoint) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenVpnEndpoint.ProtoReflect.Descriptor instead.
func (*OpenVpnEndpoint) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{58}
}

func (x *OpenVpnEndpoint) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *OpenVpnEndpoint) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

type BridgeEndpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Shadowsocks []*ShadowsocksEndpointData `protobuf:"bytes,1,rep,name=shadowsocks,proto3" json:"shadowsocks,omitempty"`
}

func (x *BridgeEndpointData) Reset() {
	*x = BridgeEndpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeEndpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeEndpointData) ProtoMessage() {}

func (x *BridgeEndpointData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeEndpointData.ProtoReflect.Descriptor instead.
func (*BridgeEndpointData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{59}
}

func (x *BridgeEndpointData) GetShadowsocks() []*ShadowsocksEndpointData {
	if x != nil {
		return x.Shadowsocks
	}
	return nil
}

type ShadowsocksEndpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Port     uint32            `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	Cipher   string            `protobuf:"bytes,2,opt,name=cipher,proto3" json:"cipher,omitempty"`
	Password string            `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Protocol TransportProtocol `protobuf:"varint,4,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
}

func (x *ShadowsocksEndpointData) Reset() {
	*x = ShadowsocksEndpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShadowsocksEndpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShadowsocksEndpointData) ProtoMessage() {}

func (x *ShadowsocksEndpointData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShadowsocksEndpointData.ProtoReflect.Descriptor instead.
func (*ShadowsocksEndpointData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{60}
}

func (x *ShadowsocksEndpointData) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *ShadowsocksEndpointData) GetCipher() string {
	if x != nil {
		return x.Cipher
	}
	return ""
}

func (x *ShadowsocksEndpointData) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ShadowsocksEndpointData) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

type WireguardEndpointData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PortRanges   []*PortRange `protobuf:"bytes,1,rep,name=port_ranges,json=portRanges,proto3" json:"port_ranges,omitempty"`
	Ipv4Gateway  string       `protobuf:"bytes,2,opt,name=ipv4_gateway,json=ipv4Gateway,proto3" json:"ipv4_gateway,omitempty"`
	Ipv6Gateway  string       `protobuf:"bytes,3,opt,name=ipv6_gateway,json=ipv6Gateway,proto3" json:"ipv6_gateway,omitempty"`
	Udp2TcpPorts []uint32     `protobuf:"varint,4,rep,packed,name=udp2tcp_ports,json=udp2tcpPorts,proto3" json:"udp2tcp_ports,omitempty"`
}

func (x *WireguardEndpointData) Reset() {
	*x = WireguardEndpointData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WireguardEndpointData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WireguardEndpointData) ProtoMessage() {}

func (x *WireguardEndpointData) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WireguardEndpointData.ProtoReflect.Descriptor instead.
func (*WireguardEndpointData) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{61}
}

func (x *WireguardEndpointData) GetPortRanges() []*PortRange {
	if x != nil {
		return x.PortRanges
	}
	return nil
}

func (x *WireguardEndpointData) GetIpv4Gateway() string {
	if x != nil {
		return x.Ipv4Gateway
	}
	return ""
}

func (x *WireguardEndpointData) GetIpv6Gateway() string {
	if x != nil {
		return x.Ipv6Gateway
	}
	return ""
}

func (x *WireguardEndpointData) GetUdp2TcpPorts() []uint32 {
	if x != nil {
		return x.Udp2TcpPorts
	}
	return nil
}

type PortRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	First uint32 `protobuf:"varint,1,opt,name=first,proto3" json:"first,omitempty"`
	Last  uint32 `protobuf:"varint,2,opt,name=last,proto3" json:"last,omitempty"`
}

func (x *PortRange) Reset() {
	*x = PortRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortRange) ProtoMessage() {}

func (x *PortRange) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortRange.ProtoReflect.Descriptor instead.
func (*PortRange) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{62}
}

func (x *PortRange) GetFirst() uint32 {
	if x != nil {
		return x.First
	}
	return 0
}

func (x *PortRange) GetLast() uint32 {
	if x != nil {
		return x.Last
	}
	return 0
}

type AccountAndDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountToken string  `protobuf:"bytes,1,opt,name=account_token,json=accountToken,proto3" json:"account_token,omitempty"`
	Device       *Device `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *AccountAndDevice) Reset() {
	*x = AccountAndDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccountAndDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountAndDevice) ProtoMessage() {}

func (x *AccountAndDevice) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountAndDevice.ProtoReflect.Descriptor instead.
func (*AccountAndDevice) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{63}
}

func (x *AccountAndDevice) GetAccountToken() string {
	if x != nil {
		return x.AccountToken
	}
	return ""
}

func (x *AccountAndDevice) GetDevice() *Device {
	if x != nil {
		return x.Device
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Pubkey    []byte                 `protobuf:"bytes,3,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	HijackDns bool                   `protobuf:"varint,5,opt,name=hijack_dns,json=hijackDns,proto3" json:"hijack_dns,omitempty"`
	Created   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{64}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *Device) GetHijackDns() bool {
	if x != nil {
		return x.HijackDns
	}
	return false
}

func (x *Device) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type DeviceList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Devices []*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *DeviceList) Reset() {
	*x = DeviceList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceList) ProtoMessage() {}

func (x *DeviceList) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceList.ProtoReflect.Descriptor instead.
func (*DeviceList) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{65}
}

func (x *DeviceList) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

type DeviceRemoval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountToken string `protobuf:"bytes,1,opt,name=account_token,json=accountToken,proto3" json:"account_token,omitempty"`
	DeviceId     string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *DeviceRemoval) Reset() {
	*x = DeviceRemoval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceRemoval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceRemoval) ProtoMessage() {}

func (x *DeviceRemoval) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceRemoval.ProtoReflect.Descriptor instead.
func (*DeviceRemoval) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{66}
}

func (x *DeviceRemoval) GetAccountToken() string {
	if x != nil {
		return x.AccountToken
	}
	return ""
}

func (x *DeviceRemoval) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type DeviceState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State  DeviceState_State `protobuf:"varint,1,opt,name=state,proto3,enum=mullvad_daemon.management_interface.DeviceState_State" json:"state,omitempty"`
	Device *AccountAndDevice `protobuf:"bytes,2,opt,name=device,proto3" json:"device,omitempty"`
}

func (x *DeviceState) Reset() {
	*x = DeviceState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceState) ProtoMessage() {}

func (x *DeviceState) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceState.ProtoReflect.Descriptor instead.
func (*DeviceState) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{67}
}

func (x *DeviceState) GetState() DeviceState_State {
	if x != nil {
		return x.State
	}
	return DeviceState_LOGGED_IN
}

func (x *DeviceState) GetDevice() *AccountAndDevice {
	if x != nil {
		return x.Device
	}
	return nil
}

type DeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cause    DeviceEvent_Cause `protobuf:"varint,1,opt,name=cause,proto3,enum=mullvad_daemon.management_interface.DeviceEvent_Cause" json:"cause,omitempty"`
	NewState *DeviceState      `protobuf:"bytes,2,opt,name=new_state,json=newState,proto3" json:"new_state,omitempty"`
}

func (x *DeviceEvent) Reset() {
	*x = DeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceEvent) ProtoMessage() {}

func (x *DeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceEvent.ProtoReflect.Descriptor instead.
func (*DeviceEvent) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{68}
}

func (x *DeviceEvent) GetCause() DeviceEvent_Cause {
	if x != nil {
		return x.Cause
	}
	return DeviceEvent_LOGGED_IN
}

func (x *DeviceEvent) GetNewState() *DeviceState {
	if x != nil {
		return x.NewState
	}
	return nil
}

type RemoveDeviceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountToken  string    `protobuf:"bytes,1,opt,name=account_token,json=accountToken,proto3" json:"account_token,omitempty"`
	NewDeviceList []*Device `protobuf:"bytes,2,rep,name=new_device_list,json=newDeviceList,proto3" json:"new_device_list,omitempty"`
}

func (x *RemoveDeviceEvent) Reset() {
	*x = RemoveDeviceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveDeviceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveDeviceEvent) ProtoMessage() {}

func (x *RemoveDeviceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveDeviceEvent.ProtoReflect.Descriptor instead.
func (*RemoveDeviceEvent) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{69}
}

func (x *RemoveDeviceEvent) GetAccountToken() string {
	if x != nil {
		return x.AccountToken
	}
	return ""
}

func (x *RemoveDeviceEvent) GetNewDeviceList() []*Device {
	if x != nil {
		return x.NewDeviceList
	}
	return nil
}

type ErrorState_FirewallPolicyError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ErrorState_FirewallPolicyError_ErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=mullvad_daemon.management_interface.ErrorState_FirewallPolicyError_ErrorType" json:"type,omitempty"`
	// LOCKED
	LockPid  uint32  `protobuf:"varint,2,opt,name=lock_pid,json=lockPid,proto3" json:"lock_pid,omitempty"`
	LockName *string `protobuf:"bytes,3,opt,name=lock_name,json=lockName,proto3,oneof" json:"lock_name,omitempty"`
}

func (x *ErrorState_FirewallPolicyError) Reset() {
	*x = ErrorState_FirewallPolicyError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ErrorState_FirewallPolicyError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ErrorState_FirewallPolicyError) ProtoMessage() {}

func (x *ErrorState_FirewallPolicyError) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ErrorState_FirewallPolicyError.ProtoReflect.Descriptor instead.
func (*ErrorState_FirewallPolicyError) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ErrorState_FirewallPolicyError) GetType() ErrorState_FirewallPolicyError_ErrorType {
	if x != nil {
		return x.Type
	}
	return ErrorState_FirewallPolicyError_GENERIC
}

func (x *ErrorState_FirewallPolicyError) GetLockPid() uint32 {
	if x != nil {
		return x.LockPid
	}
	return 0
}

func (x *ErrorState_FirewallPolicyError) GetLockName() string {
	if x != nil && x.LockName != nil {
		return *x.LockName
	}
	return ""
}

type TunnelState_Disconnected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DisconnectedLocation *GeoIpLocation `protobuf:"bytes,1,opt,name=disconnected_location,json=disconnectedLocation,proto3" json:"disconnected_location,omitempty"`
	LockedDown           bool           `protobuf:"varint,2,opt,name=locked_down,json=lockedDown,proto3" json:"locked_down,omitempty"`
}

func (x *TunnelState_Disconnected) Reset() {
	*x = TunnelState_Disconnected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState_Disconnected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState_Disconnected) ProtoMessage() {}

func (x *TunnelState_Disconnected) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState_Disconnected.ProtoReflect.Descriptor instead.
func (*TunnelState_Disconnected) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5, 0}
}

func (x *TunnelState_Disconnected) GetDisconnectedLocation() *GeoIpLocation {
	if x != nil {
		return x.DisconnectedLocation
	}
	return nil
}

func (x *TunnelState_Disconnected) GetLockedDown() bool {
	if x != nil {
		return x.LockedDown
	}
	return false
}

type TunnelState_Connecting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayInfo *TunnelStateRelayInfo `protobuf:"bytes,1,opt,name=relay_info,json=relayInfo,proto3" json:"relay_info,omitempty"`
}

func (x *TunnelState_Connecting) Reset() {
	*x = TunnelState_Connecting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState_Connecting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState_Connecting) ProtoMessage() {}

func (x *TunnelState_Connecting) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState_Connecting.ProtoReflect.Descriptor instead.
func (*TunnelState_Connecting) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5, 1}
}

func (x *TunnelState_Connecting) GetRelayInfo() *TunnelStateRelayInfo {
	if x != nil {
		return x.RelayInfo
	}
	return nil
}

type TunnelState_Connected struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RelayInfo *TunnelStateRelayInfo `protobuf:"bytes,1,opt,name=relay_info,json=relayInfo,proto3" json:"relay_info,omitempty"`
}

func (x *TunnelState_Connected) Reset() {
	*x = TunnelState_Connected{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState_Connected) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState_Connected) ProtoMessage() {}

func (x *TunnelState_Connected) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState_Connected.ProtoReflect.Descriptor instead.
func (*TunnelState_Connected) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5, 2}
}

func (x *TunnelState_Connected) GetRelayInfo() *TunnelStateRelayInfo {
	if x != nil {
		return x.RelayInfo
	}
	return nil
}

type TunnelState_Disconnecting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AfterDisconnect AfterDisconnect `protobuf:"varint,1,opt,name=after_disconnect,json=afterDisconnect,proto3,enum=mullvad_daemon.management_interface.AfterDisconnect" json:"after_disconnect,omitempty"`
}

func (x *TunnelState_Disconnecting) Reset() {
	*x = TunnelState_Disconnecting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState_Disconnecting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState_Disconnecting) ProtoMessage() {}

func (x *TunnelState_Disconnecting) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState_Disconnecting.ProtoReflect.Descriptor instead.
func (*TunnelState_Disconnecting) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5, 3}
}

func (x *TunnelState_Disconnecting) GetAfterDisconnect() AfterDisconnect {
	if x != nil {
		return x.AfterDisconnect
	}
	return AfterDisconnect_NOTHING
}

type TunnelState_Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorState *ErrorState `protobuf:"bytes,1,opt,name=error_state,json=errorState,proto3" json:"error_state,omitempty"`
}

func (x *TunnelState_Error) Reset() {
	*x = TunnelState_Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelState_Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelState_Error) ProtoMessage() {}

func (x *TunnelState_Error) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelState_Error.ProtoReflect.Descriptor instead.
func (*TunnelState_Error) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{5, 4}
}

func (x *TunnelState_Error) GetErrorState() *ErrorState {
	if x != nil {
		return x.ErrorState
	}
	return nil
}

type BridgeSettings_BridgeConstraints struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location  *LocationConstraint `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Providers []string            `protobuf:"bytes,2,rep,name=providers,proto3" json:"providers,omitempty"`
	Ownership Ownership           `protobuf:"varint,3,opt,name=ownership,proto3,enum=mullvad_daemon.management_interface.Ownership" json:"ownership,omitempty"`
}

func (x *BridgeSettings_BridgeConstraints) Reset() {
	*x = BridgeSettings_BridgeConstraints{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BridgeSettings_BridgeConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BridgeSettings_BridgeConstraints) ProtoMessage() {}

func (x *BridgeSettings_BridgeConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BridgeSettings_BridgeConstraints.ProtoReflect.Descriptor instead.
func (*BridgeSettings_BridgeConstraints) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{13, 0}
}

func (x *BridgeSettings_BridgeConstraints) GetLocation() *LocationConstraint {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *BridgeSettings_BridgeConstraints) GetProviders() []string {
	if x != nil {
		return x.Providers
	}
	return nil
}

func (x *BridgeSettings_BridgeConstraints) GetOwnership() Ownership {
	if x != nil {
		return x.Ownership
	}
	return Ownership_ANY
}

type AccessMethod_Direct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessMethod_Direct) Reset() {
	*x = AccessMethod_Direct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessMethod_Direct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessMethod_Direct) ProtoMessage() {}

func (x *AccessMethod_Direct) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessMethod_Direct.ProtoReflect.Descriptor instead.
func (*AccessMethod_Direct) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{26, 0}
}

type AccessMethod_Bridges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AccessMethod_Bridges) Reset() {
	*x = AccessMethod_Bridges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessMethod_Bridges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessMethod_Bridges) ProtoMessage() {}

func (x *AccessMethod_Bridges) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessMethod_Bridges.ProtoReflect.Descriptor instead.
func (*AccessMethod_Bridges) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{26, 1}
}

type ConnectionConfig_OpenvpnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Protocol TransportProtocol `protobuf:"varint,2,opt,name=protocol,proto3,enum=mullvad_daemon.management_interface.TransportProtocol" json:"protocol,omitempty"`
	Username string            `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	Password string            `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *ConnectionConfig_OpenvpnConfig) Reset() {
	*x = ConnectionConfig_OpenvpnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConfig_OpenvpnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig_OpenvpnConfig) ProtoMessage() {}

func (x *ConnectionConfig_OpenvpnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig_OpenvpnConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig_OpenvpnConfig) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{39, 0}
}

func (x *ConnectionConfig_OpenvpnConfig) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ConnectionConfig_OpenvpnConfig) GetProtocol() TransportProtocol {
	if x != nil {
		return x.Protocol
	}
	return TransportProtocol_UDP
}

func (x *ConnectionConfig_OpenvpnConfig) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *ConnectionConfig_OpenvpnConfig) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ConnectionConfig_WireguardConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tunnel      *ConnectionConfig_WireguardConfig_TunnelConfig `protobuf:"bytes,1,opt,name=tunnel,proto3" json:"tunnel,omitempty"`
	Peer        *ConnectionConfig_WireguardConfig_PeerConfig   `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
	Ipv4Gateway string                                         `protobuf:"bytes,3,opt,name=ipv4_gateway,json=ipv4Gateway,proto3" json:"ipv4_gateway,omitempty"`
	Ipv6Gateway *string                                        `protobuf:"bytes,4,opt,name=ipv6_gateway,json=ipv6Gateway,proto3,oneof" json:"ipv6_gateway,omitempty"`
}

func (x *ConnectionConfig_WireguardConfig) Reset() {
	*x = ConnectionConfig_WireguardConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConfig_WireguardConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig_WireguardConfig) ProtoMessage() {}

func (x *ConnectionConfig_WireguardConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig_WireguardConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig_WireguardConfig) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{39, 1}
}

func (x *ConnectionConfig_WireguardConfig) GetTunnel() *ConnectionConfig_WireguardConfig_TunnelConfig {
	if x != nil {
		return x.Tunnel
	}
	return nil
}

func (x *ConnectionConfig_WireguardConfig) GetPeer() *ConnectionConfig_WireguardConfig_PeerConfig {
	if x != nil {
		return x.Peer
	}
	return nil
}

func (x *ConnectionConfig_WireguardConfig) GetIpv4Gateway() string {
	if x != nil {
		return x.Ipv4Gateway
	}
	return ""
}

func (x *ConnectionConfig_WireguardConfig) GetIpv6Gateway() string {
	if x != nil && x.Ipv6Gateway != nil {
		return *x.Ipv6Gateway
	}
	return ""
}

type ConnectionConfig_WireguardConfig_TunnelConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrivateKey []byte   `protobuf:"bytes,1,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	Addresses  []string `protobuf:"bytes,2,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (x *ConnectionConfig_WireguardConfig_TunnelConfig) Reset() {
	*x = ConnectionConfig_WireguardConfig_TunnelConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConfig_WireguardConfig_TunnelConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig_WireguardConfig_TunnelConfig) ProtoMessage() {}

func (x *ConnectionConfig_WireguardConfig_TunnelConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig_WireguardConfig_TunnelConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig_WireguardConfig_TunnelConfig) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{39, 1, 0}
}

func (x *ConnectionConfig_WireguardConfig_TunnelConfig) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *ConnectionConfig_WireguardConfig_TunnelConfig) GetAddresses() []string {
	if x != nil {
		return x.Addresses
	}
	return nil
}

type ConnectionConfig_WireguardConfig_PeerConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  []byte   `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	AllowedIps []string `protobuf:"bytes,2,rep,name=allowed_ips,json=allowedIps,proto3" json:"allowed_ips,omitempty"`
	Endpoint   string   `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) Reset() {
	*x = ConnectionConfig_WireguardConfig_PeerConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectionConfig_WireguardConfig_PeerConfig) ProtoMessage() {}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectionConfig_WireguardConfig_PeerConfig.ProtoReflect.Descriptor instead.
func (*ConnectionConfig_WireguardConfig_PeerConfig) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{39, 1, 1}
}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) GetAllowedIps() []string {
	if x != nil {
		return x.AllowedIps
	}
	return nil
}

func (x *ConnectionConfig_WireguardConfig_PeerConfig) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type TunnelOptions_OpenvpnOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mssfix *uint32 `protobuf:"varint,1,opt,name=mssfix,proto3,oneof" json:"mssfix,omitempty"`
}

func (x *TunnelOptions_OpenvpnOptions) Reset() {
	*x = TunnelOptions_OpenvpnOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOptions_OpenvpnOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOptions_OpenvpnOptions) ProtoMessage() {}

func (x *TunnelOptions_OpenvpnOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOptions_OpenvpnOptions.ProtoReflect.Descriptor instead.
func (*TunnelOptions_OpenvpnOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{42, 0}
}

func (x *TunnelOptions_OpenvpnOptions) GetMssfix() uint32 {
	if x != nil && x.Mssfix != nil {
		return *x.Mssfix
	}
	return 0
}

type TunnelOptions_WireguardOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mtu              *uint32                `protobuf:"varint,1,opt,name=mtu,proto3,oneof" json:"mtu,omitempty"`
	RotationInterval *durationpb.Duration   `protobuf:"bytes,2,opt,name=rotation_interval,json=rotationInterval,proto3" json:"rotation_interval,omitempty"`
	QuantumResistant *QuantumResistantState `protobuf:"bytes,4,opt,name=quantum_resistant,json=quantumResistant,proto3" json:"quantum_resistant,omitempty"`
	Daita            *DaitaSettings         `protobuf:"bytes,5,opt,name=daita,proto3" json:"daita,omitempty"`
}

func (x *TunnelOptions_WireguardOptions) Reset() {
	*x = TunnelOptions_WireguardOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOptions_WireguardOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOptions_WireguardOptions) ProtoMessage() {}

func (x *TunnelOptions_WireguardOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOptions_WireguardOptions.ProtoReflect.Descriptor instead.
func (*TunnelOptions_WireguardOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{42, 1}
}

func (x *TunnelOptions_WireguardOptions) GetMtu() uint32 {
	if x != nil && x.Mtu != nil {
		return *x.Mtu
	}
	return 0
}

func (x *TunnelOptions_WireguardOptions) GetRotationInterval() *durationpb.Duration {
	if x != nil {
		return x.RotationInterval
	}
	return nil
}

func (x *TunnelOptions_WireguardOptions) GetQuantumResistant() *QuantumResistantState {
	if x != nil {
		return x.QuantumResistant
	}
	return nil
}

func (x *TunnelOptions_WireguardOptions) GetDaita() *DaitaSettings {
	if x != nil {
		return x.Daita
	}
	return nil
}

type TunnelOptions_GenericOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EnableIpv6 bool `protobuf:"varint,1,opt,name=enable_ipv6,json=enableIpv6,proto3" json:"enable_ipv6,omitempty"`
}

func (x *TunnelOptions_GenericOptions) Reset() {
	*x = TunnelOptions_GenericOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_management_interface_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelOptions_GenericOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelOptions_GenericOptions) ProtoMessage() {}

func (x *TunnelOptions_GenericOptions) ProtoReflect() protoreflect.Message {
	mi := &file_management_interface_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelOptions_GenericOptions.ProtoReflect.Descriptor instead.
func (*TunnelOptions_GenericOptions) Descriptor() ([]byte, []int) {
	return file_management_interface_proto_rawDescGZIP(), []int{42, 2}
}

func (x *TunnelOptions_GenericOptions) GetEnableIpv6() bool {
	if x != nil {
		return x.EnableIpv6
	}
	return false
}

var File_management_interface_proto protoreflect.FileDescriptor

var file_management_interface_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x23, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x51, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x0e, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x32, 0x0a,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x22, 0x73, 0x0a, 0x11, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64,
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x73,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x41, 0x64, 0x64, 0x65, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x6e,
	0x65, 0x77, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x6e, 0x65, 0x77,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x9d, 0x0a, 0x0a, 0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4b, 0x0a, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x75, 0x73, 0x65, 0x52, 0x05, 0x63, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x6a, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x65,
	0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6b,
	0x0a, 0x11, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x46,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0f, 0x61, 0x75, 0x74, 0x68,
	0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x68, 0x0a, 0x0f, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x3f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x0e, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x66, 0x0a, 0x0c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x72,
	0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x33, 0x0a,
	0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x88,
	0x01, 0x01, 0x1a, 0xe9, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x61, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4d, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77, 0x61,
	0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x22, 0x24, 0x0a, 0x09, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52,
	0x49, 0x43, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf1,
	0x01, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x55, 0x54, 0x48,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x50, 0x56,
	0x36, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x45, 0x54, 0x5f, 0x46, 0x49, 0x52, 0x45, 0x57, 0x41, 0x4c, 0x4c, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x53, 0x45, 0x54, 0x5f, 0x44, 0x4e, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45,
	0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43,
	0x45, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x06, 0x12,
	0x0e, 0x0a, 0x0a, 0x49, 0x53, 0x5f, 0x4f, 0x46, 0x46, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x07, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x50, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x50,
	0x4c, 0x49, 0x54, 0x5f, 0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x09, 0x22, 0x62, 0x0a, 0x0f, 0x41, 0x75, 0x74, 0x68, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41, 0x43,
	0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x58, 0x50, 0x49, 0x52,
	0x45, 0x44, 0x5f, 0x41, 0x43, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x10, 0x03, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x4e, 0x4f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x59, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x5f, 0x57, 0x49, 0x52, 0x45, 0x47, 0x55, 0x41, 0x52, 0x44, 0x5f,
	0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x27, 0x0a, 0x23, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x5f,
	0x54, 0x55, 0x4e, 0x4e, 0x45, 0x4c, 0x5f, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x4f,
	0x4c, 0x55, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x16,
	0x0a, 0x14, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa5, 0x08, 0x0a, 0x0b, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x63, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x5d, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5a, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x66, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3e, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x4e,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0x98,
	0x01, 0x0a, 0x0c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12,
	0x67, 0x0a, 0x15, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6c,
	0x6f, 0x63, 0x6b, 0x65, 0x64, 0x44, 0x6f, 0x77, 0x6e, 0x1a, 0x66, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0x65, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x58,
	0x0a, 0x0a, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x70, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5f, 0x0a, 0x10, 0x61, 0x66, 0x74,
	0x65, 0x72, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x66, 0x74, 0x65, 0x72, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x1a, 0x59, 0x0a, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x50, 0x0a, 0x0b, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0xc4,
	0x01, 0x0a, 0x14, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x4e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65,
	0x6f, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xed, 0x04, 0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x12,
	0x5a, 0x0a, 0x0b, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0b,
	0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x54, 0x0a, 0x0e, 0x65,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x52, 0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x0e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x64, 0x61, 0x69, 0x74, 0x61, 0x22, 0xf8, 0x01, 0x0a, 0x13, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x5f, 0x0a, 0x10, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0f, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x22, 0x78, 0x0a, 0x08, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xcc, 0x01, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x4d, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x78, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0xee, 0x03, 0x0a, 0x0d, 0x47, 0x65,
	0x6f, 0x49, 0x70, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76,
	0x34, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x45, 0x78, 0x69, 0x74,
	0x49, 0x70, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0e,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0d, 0x65, 0x6e, 0x74,
	0x72, 0x79, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x34, 0x0a,
	0x13, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x12, 0x6f, 0x62,
	0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x42, 0x07, 0x0a, 0x05,
	0x5f, 0x69, 0x70, 0x76, 0x36, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69, 0x74, 0x79, 0x42, 0x0b,
	0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f,
	0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x11, 0x0a, 0x0f, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x16, 0x0a, 0x14, 0x5f, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3b, 0x0a, 0x0e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x29, 0x0a, 0x10,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x22, 0x97, 0x04, 0x0a, 0x0e, 0x42, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5f, 0x0a, 0x0b, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x3e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0a, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x06, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12, 0x48, 0x0a, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x52, 0x06, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x1a, 0xd4, 0x01, 0x0a, 0x11, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x08, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x4c, 0x0a,
	0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70,
	0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0x24, 0x0a, 0x0a, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x4f, 0x52,
	0x4d, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x22, 0xa0, 0x01, 0x0a, 0x12, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5f, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x69, 0x63, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70,
	0x68, 0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x17, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x68, 0x6f,
	0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x69,
	0x74, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x7f, 0x0a, 0x0b, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x22, 0x3e, 0x0a, 0x1a, 0x55, 0x64, 0x70, 0x32, 0x54, 0x63, 0x70, 0x4f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x22, 0xa8, 0x02, 0x0a, 0x13, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x7f, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x5f, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x4c, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x66,
	0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4f, 0x62,
	0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x07, 0x75, 0x64, 0x70,
	0x32, 0x74, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x55, 0x64, 0x70, 0x32, 0x54, 0x63, 0x70, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x07, 0x75, 0x64, 0x70,
	0x32, 0x74, 0x63, 0x70, 0x22, 0x35, 0x0a, 0x13, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x08, 0x0a, 0x04, 0x41,
	0x55, 0x54, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x44, 0x50, 0x32, 0x54, 0x43, 0x50, 0x10, 0x02, 0x22, 0x91, 0x01, 0x0a, 0x0a,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5f,
	0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x41, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x6f, 0x67, 0x72, 0x61, 0x70, 0x68,
	0x69, 0x63, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22,
	0x68, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x52, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0b, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x22, 0xde, 0x01, 0x0a, 0x0b, 0x53, 0x6f,
	0x63, 0x6b, 0x73, 0x35, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x72, 0x0a, 0x19, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x53, 0x6f,
	0x63, 0x6b, 0x73, 0x41, 0x75, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x76, 0x0a, 0x0c, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x42, 0x0a, 0x04, 0x61, 0x75, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x41, 0x75, 0x74,
	0x68, 0x52, 0x04, 0x61, 0x75, 0x74, 0x68, 0x22, 0x65, 0x0a, 0x0b, 0x53, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x22, 0xa2,
	0x02, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x54,
	0x0a, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x35,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x6c,
	0x6f, 0x63, 0x61, 0x6c, 0x12, 0x57, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x53, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x54, 0x0a,
	0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73,
	0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f,
	0x63, 0x6b, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x22, 0xab, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x62, 0x72, 0x69, 0x64,
	0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x42, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x73, 0x48, 0x00, 0x52, 0x07, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12,
	0x4a, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x48, 0x00, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x1a, 0x08, 0x0a, 0x06, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x1a, 0x09, 0x0a, 0x07, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73,
	0x42, 0x0f, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x22, 0xd6, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x9e, 0x01, 0x0a, 0x16, 0x4e,
	0x65, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0xa0, 0x02, 0x0a, 0x17,
	0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x50, 0x0a, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x52, 0x06, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x61, 0x0a, 0x0f, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x06,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x22, 0x88,
	0x08, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x59, 0x0a, 0x0e, 0x72,
	0x65, 0x6c, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0d, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x5f, 0x6c, 0x61, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x4c, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x17, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f,
	0x77, 0x68, 0x65, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x57, 0x68,
	0x65, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x61, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x12, 0x59, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x12,
	0x73, 0x68, 0x6f, 0x77, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x6f, 0x77, 0x42, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x5b, 0x0a, 0x0c, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0b, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x6b, 0x0a, 0x14, 0x6f, 0x62, 0x66, 0x75, 0x73,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x62, 0x66, 0x75,
	0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x13, 0x6f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x5a, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x6a, 0x0a, 0x12, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x10, 0x61, 0x70, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x5b, 0x0a, 0x0f,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x52, 0x0e, 0x72, 0x65, 0x6c, 0x61, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x22, 0x9b, 0x01, 0x0a, 0x0d, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0a, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x25,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36, 0x41, 0x64, 0x64, 0x72,
	0x49, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e, 0x22, 0x56, 0x0a, 0x13, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2b,
	0x0a, 0x11, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x61,
	0x70, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x70, 0x70, 0x73, 0x22,
	0xc3, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x52, 0x0a, 0x06, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x52, 0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x42, 0x0a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x97, 0x04, 0x0a, 0x13, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x53, 0x0a,
	0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x37, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x55, 0x0a, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x6e, 0x0a, 0x15, 0x77, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72,
	0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x52, 0x14, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x68, 0x0a, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x76,
	0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x76,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x4c, 0x0a, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x52, 0x09, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x5c, 0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x76,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x46, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x14, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x17,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x69,
	0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x68, 0x6f, 0x70, 0x12, 0x5e,
	0x0a, 0x0e, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x52,
	0x0d, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x70, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x78, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73,
	0x74, 0x12, 0x4d, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x22, 0x97, 0x07, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x5f, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x76, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x07, 0x6f,
	0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x12, 0x65, 0x0a, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x45, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x48, 0x00, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x1a, 0xb5, 0x01,
	0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0xf8, 0x03, 0x0a, 0x0f, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x06, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x64, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69,
	0x70, 0x76, 0x34, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x26,
	0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x68, 0x0a, 0x0a, 0x50, 0x65, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b,
	0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x69, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x49, 0x70, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x93, 0x01, 0x0a, 0x15, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x56, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x40, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x75,
	0x6d, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x22, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x55, 0x54, 0x4f, 0x10, 0x00, 0x12,
	0x06, 0x0a, 0x02, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x46, 0x46, 0x10, 0x02,
	0x22, 0x29, 0x0a, 0x0d, 0x44, 0x61, 0x69, 0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x9a, 0x06, 0x0a, 0x0d,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5b, 0x0a,
	0x07, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x12, 0x61, 0x0a, 0x09, 0x77, 0x69,
	0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x43, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x12, 0x5b, 0x0a,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x41,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x0b, 0x64, 0x6e,
	0x73, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x52, 0x0a, 0x64, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x38, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x06, 0x6d, 0x73, 0x73, 0x66, 0x69, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x06, 0x6d, 0x73, 0x73, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x6d, 0x73, 0x73, 0x66, 0x69, 0x78, 0x1a, 0xac, 0x02, 0x0a, 0x10, 0x57, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x03, 0x6d,
	0x74, 0x75, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x74, 0x75, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x11, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x67, 0x0a, 0x11, 0x71, 0x75,
	0x61, 0x6e, 0x74, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x10, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x05, 0x64, 0x61, 0x69, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x69, 0x74, 0x61, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x05, 0x64, 0x61, 0x69, 0x74, 0x61, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x6d, 0x74, 0x75, 0x1a, 0x31, 0x0a, 0x0e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x22, 0x81, 0x02, 0x0a, 0x11, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x61, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x65,
	0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x6d, 0x61, 0x6c, 0x77,
	0x61, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x64, 0x75, 0x6c, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x67, 0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x47, 0x61, 0x6d, 0x62, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x2c,
	0x0a, 0x12, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x6f, 0x63, 0x69, 0x61, 0x6c, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x22, 0x30, 0x0a, 0x10,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xc0,
	0x02, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x4e, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x44, 0x6e,
	0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5f, 0x0a,
	0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x5c,
	0x0a, 0x0e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x44, 0x6e, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0d, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x23, 0x0a, 0x08,
	0x44, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10,
	0x01, 0x22, 0x53, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x57, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x65, 0x64, 0x22,
	0x69, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x45, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x41,
	0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a,
	0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x65, 0x74, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x42, 0x65, 0x74,
	0x61, 0x12, 0x30, 0x0a, 0x11, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x75,
	0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65, 0x64, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x5f, 0x75, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x06, 0x63, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x69, 0x74, 0x79, 0x52, 0x06, 0x63, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x22, 0xb5, 0x01, 0x0a, 0x0d, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x43, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x52, 0x06, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x22, 0xa3, 0x04, 0x0a, 0x05, 0x52,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x20, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x49, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x70, 0x76, 0x36,
	0x41, 0x64, 0x64, 0x72, 0x49, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x63,
	0x6c, 0x75, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x49, 0x6e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x59, 0x0a, 0x0d, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x34, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0c, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x49, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33, 0x0a, 0x09, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x56,
	0x50, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x49, 0x44, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x57, 0x49, 0x52, 0x45, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x02, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x69, 0x70, 0x76, 0x36, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x5f, 0x69, 0x6e,
	0x22, 0x51, 0x0a, 0x1a, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x61, 0x69, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x61,
	0x69, 0x74, 0x61, 0x22, 0xb2, 0x01, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x22, 0xf8, 0x04, 0x0a, 0x0b, 0x44, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4b, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x4f, 0x0a, 0x0a,
	0x72, 0x65, 0x6c, 0x61, 0x79, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x58, 0x0a,
	0x0c, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x66, 0x0a, 0x11, 0x6e, 0x65, 0x77, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x65, 0x77, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x22, 0xdf, 0x02, 0x0a, 0x09, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x53, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x70,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x6e, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x07, 0x6f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x12, 0x4f, 0x0a, 0x06, 0x62, 0x72,
	0x69, 0x64, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x06, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x58, 0x0a, 0x09, 0x77,
	0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x09, 0x77, 0x69, 0x72, 0x65,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x22, 0x69, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x70, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x52, 0x0a, 0x09,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x22, 0x79, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x56, 0x70, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x74, 0x0a, 0x12, 0x42,
	0x72, 0x69, 0x64, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x5e, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x52, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0xb5, 0x01, 0x0a, 0x17, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b,
	0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x52, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x15, 0x57, 0x69,
	0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x4f, 0x0a, 0x0b, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x34, 0x5f, 0x67, 0x61, 0x74,
	0x65, 0x77, 0x61, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x76, 0x34,
	0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x70, 0x76, 0x36, 0x5f,
	0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69,
	0x70, 0x76, 0x36, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x75, 0x64,
	0x70, 0x32, 0x74, 0x63, 0x70, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0c, 0x75, 0x64, 0x70, 0x32, 0x74, 0x63, 0x70, 0x50, 0x6f, 0x72, 0x74, 0x73, 0x22,
	0x35, 0x0a, 0x09, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x22, 0x7c, 0x0a, 0x10, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x43, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x68,
	0x69, 0x6a, 0x61, 0x63, 0x6b, 0x5f, 0x64, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x68, 0x69, 0x6a, 0x61, 0x63, 0x6b, 0x44, 0x6e, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x22, 0x53, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x51, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x22, 0xdf, 0x01, 0x0a, 0x0b, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6e, 0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x22, 0x33, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x22, 0xfd, 0x01, 0x0a, 0x0b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x05, 0x63, 0x61,
	0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x52, 0x05, 0x63, 0x61, 0x75, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x08, 0x6e,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x51, 0x0a, 0x05, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x49, 0x4e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4c, 0x4f, 0x47, 0x47, 0x45, 0x44, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x4f, 0x54,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x23, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x53, 0x0a, 0x0f, 0x6e, 0x65, 0x77, 0x5f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0d, 0x6e, 0x65, 0x77,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x38, 0x0a, 0x0f, 0x41, 0x66,
	0x74, 0x65, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0b, 0x0a,
	0x07, 0x4e, 0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x4c,
	0x4f, 0x43, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x10, 0x02, 0x2a, 0x28, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4f, 0x50, 0x45, 0x4e, 0x56, 0x50, 0x4e, 0x10, 0x00, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x49, 0x52, 0x45, 0x47, 0x55, 0x41, 0x52, 0x44, 0x10, 0x01, 0x2a, 0x1e,
	0x0a, 0x0f, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x44, 0x50, 0x32, 0x54, 0x43, 0x50, 0x10, 0x00, 0x2a, 0x28,
	0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x48, 0x41, 0x44, 0x4f, 0x57, 0x53, 0x4f, 0x43, 0x4b, 0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x43, 0x55, 0x53, 0x54, 0x4f, 0x4d, 0x10, 0x01, 0x2a, 0x33, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x4d, 0x55, 0x4c, 0x4c, 0x56, 0x41, 0x44, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4e, 0x54, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x1b, 0x0a,
	0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x34,
	0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x36, 0x10, 0x01, 0x2a, 0x25, 0x0a, 0x11, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50, 0x10,
	0x01, 0x32, 0xac, 0x2e, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x48,
	0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x0f, 0x52, 0x65, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x6d, 0x75,
	0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x0c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a,
	0x0e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x40, 0x0a, 0x0c, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x12, 0x5f, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0x00, 0x12, 0x4f, 0x0a, 0x17, 0x49, 0x73, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x73, 0x74, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x00, 0x12, 0x48, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x11,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a,
	0x11, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x33, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x5c, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x6c, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x4f, 0x62, 0x66, 0x75, 0x73, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x56, 0x0a,
	0x0b, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2d, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x4c, 0x61, 0x6e, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x53, 0x68, 0x6f, 0x77, 0x42, 0x65, 0x74, 0x61, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x73, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x50, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x57, 0x68, 0x65, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x53, 0x65, 0x74,
	0x41, 0x75, 0x74, 0x6f, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x4a, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x6e, 0x76, 0x70, 0x6e, 0x4d,
	0x73, 0x73, 0x66, 0x69, 0x78, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a,
	0x0f, 0x53, 0x65, 0x74, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4d, 0x74, 0x75,
	0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x70, 0x76, 0x36, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x71, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x3a, 0x2e, 0x6d,
	0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74,
	0x61, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x60, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x44, 0x61, 0x69, 0x74, 0x61, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x61, 0x69,
	0x74, 0x61, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x44, 0x6e, 0x73, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x6e, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x60, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4a, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x6c, 0x61, 0x79, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4a,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0c, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x41, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x11, 0x47, 0x65, 0x74,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x33, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x00, 0x12, 0x47, 0x0a,
	0x13, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x77, 0x77,
	0x41, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x0d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x56, 0x6f, 0x75, 0x63, 0x68,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x36, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x56, 0x6f, 0x75, 0x63, 0x68, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65,
	0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0c, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x32, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f,
	0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x61, 0x6c, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x53, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x52, 0x0a, 0x1e, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x12,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x57, 0x69, 0x72, 0x65, 0x67, 0x75, 0x61, 0x72, 0x64, 0x4b,
	0x65, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x5b, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x57, 0x69, 0x72, 0x65, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x2e, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e,
	0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0x00, 0x12, 0x50, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x00, 0x12, 0x4a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12,
	0x5d, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x2f, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61,
	0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x44,
	0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4c, 0x69, 0x73,
	0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x7e, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x41, 0x70, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x3b, 0x2e, 0x6d, 0x75, 0x6c,
	0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x2e, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x1a, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x55,
	0x49, 0x44, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x70,
	0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x2e,
	0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x59, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76,
	0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55,
	0x55, 0x49, 0x44, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64,
	0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4f, 0x0a, 0x1b, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x19, 0x47,
	0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x00, 0x12, 0x6b, 0x0a, 0x19,
	0x54, 0x65, 0x73, 0x74, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x30, 0x2e, 0x6d, 0x75, 0x6c, 0x6c,
	0x76, 0x61, 0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x1a, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x17, 0x54, 0x65, 0x73,
	0x74, 0x41, 0x70, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x29, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x64,
	0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x55, 0x55, 0x49, 0x44, 0x1a,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x12, 0x52, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4e, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x00, 0x12, 0x51, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x19, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x14, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x70, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x13, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x6a, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x38, 0x2e, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61,
	0x64, 0x5f, 0x64, 0x61, 0x65, 0x6d, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x2e, 0x45, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x11, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x4a, 0x73,
	0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x12, 0x4c, 0x0a, 0x12, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4a, 0x73, 0x6f, 0x6e,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x00,
	0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x2e, 0x74, 0x63, 0x70, 0x2e, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x2f, 0x6b, 0x61, 0x79, 0x6f, 0x73, 0x2f, 0x6d, 0x75, 0x6c, 0x6c, 0x79, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x6d, 0x75, 0x6c, 0x6c, 0x76, 0x61, 0x64, 0x5f, 0x6d, 0x67, 0x6d, 0x74, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_management_interface_proto_rawDescOnce sync.Once
	file_management_interface_proto_rawDescData = file_management_interface_proto_rawDesc
)

func file_management_interface_proto_rawDescGZIP() []byte {
	file_management_interface_proto_rawDescOnce.Do(func() {
		file_management_interface_proto_rawDescData = protoimpl.X.CompressGZIP(file_management_interface_proto_rawDescData)
	})
	return file_management_interface_proto_rawDescData
}

var file_management_interface_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_management_interface_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_management_interface_proto_goTypes = []interface{}{
	(AfterDisconnect)(0),                                  // 0: mullvad_daemon.management_interface.AfterDisconnect
	(TunnelType)(0),                                       // 1: mullvad_daemon.management_interface.TunnelType
	(ObfuscationType)(0),                                  // 2: mullvad_daemon.management_interface.ObfuscationType
	(ProxyType)(0),                                        // 3: mullvad_daemon.management_interface.ProxyType
	(Ownership)(0),                                        // 4: mullvad_daemon.management_interface.Ownership
	(IpVersion)(0),                                        // 5: mullvad_daemon.management_interface.IpVersion
	(TransportProtocol)(0),                                // 6: mullvad_daemon.management_interface.TransportProtocol
	(ErrorState_Cause)(0),                                 // 7: mullvad_daemon.management_interface.ErrorState.Cause
	(ErrorState_AuthFailedError)(0),                       // 8: mullvad_daemon.management_interface.ErrorState.AuthFailedError
	(ErrorState_GenerationError)(0),                       // 9: mullvad_daemon.management_interface.ErrorState.GenerationError
	(ErrorState_FirewallPolicyError_ErrorType)(0),         // 10: mullvad_daemon.management_interface.ErrorState.FirewallPolicyError.ErrorType
	(BridgeSettings_BridgeType)(0),                        // 11: mullvad_daemon.management_interface.BridgeSettings.BridgeType
	(BridgeState_State)(0),                                // 12: mullvad_daemon.management_interface.BridgeState.State
	(ObfuscationSettings_SelectedObfuscation)(0),          // 13: mullvad_daemon.management_interface.ObfuscationSettings.SelectedObfuscation
	(QuantumResistantState_State)(0),                      // 14: mullvad_daemon.management_interface.QuantumResistantState.State
	(DnsOptions_DnsState)(0),                              // 15: mullvad_daemon.management_interface.DnsOptions.DnsState
	(Relay_RelayType)(0),                                  // 16: mullvad_daemon.management_interface.Relay.RelayType
	(DeviceState_State)(0),                                // 17: mullvad_daemon.management_interface.DeviceState.State
	(DeviceEvent_Cause)(0),                                // 18: mullvad_daemon.management_interface.DeviceEvent.Cause
	(*UUID)(nil),                                          // 19: mullvad_daemon.management_interface.UUID
	(*AccountData)(nil),                                   // 20: mullvad_daemon.management_interface.AccountData
	(*AccountHistory)(nil),                                // 21: mullvad_daemon.management_interface.AccountHistory
	(*VoucherSubmission)(nil),                             // 22: mullvad_daemon.management_interface.VoucherSubmission
	(*ErrorState)(nil),                                    // 23: mullvad_daemon.management_interface.ErrorState
	(*TunnelState)(nil),                                   // 24: mullvad_daemon.management_interface.TunnelState
	(*TunnelStateRelayInfo)(nil),                          // 25: mullvad_daemon.management_interface.TunnelStateRelayInfo
	(*TunnelEndpoint)(nil),                                // 26: mullvad_daemon.management_interface.TunnelEndpoint
	(*ObfuscationEndpoint)(nil),                           // 27: mullvad_daemon.management_interface.ObfuscationEndpoint
	(*Endpoint)(nil),                                      // 28: mullvad_daemon.management_interface.Endpoint
	(*ProxyEndpoint)(nil),                                 // 29: mullvad_daemon.management_interface.ProxyEndpoint
	(*GeoIpLocation)(nil),                                 // 30: mullvad_daemon.management_interface.GeoIpLocation
	(*TunnelMetadata)(nil),                                // 31: mullvad_daemon.management_interface.TunnelMetadata
	(*BridgeSettings)(nil),                                // 32: mullvad_daemon.management_interface.BridgeSettings
	(*LocationConstraint)(nil),                            // 33: mullvad_daemon.management_interface.LocationConstraint
	(*GeographicLocationConstraint)(nil),                  // 34: mullvad_daemon.management_interface.GeographicLocationConstraint
	(*BridgeState)(nil),                                   // 35: mullvad_daemon.management_interface.BridgeState
	(*Udp2TcpObfuscationSettings)(nil),                    // 36: mullvad_daemon.management_interface.Udp2TcpObfuscationSettings
	(*ObfuscationSettings)(nil),                           // 37: mullvad_daemon.management_interface.ObfuscationSettings
	(*CustomList)(nil),                                    // 38: mullvad_daemon.management_interface.CustomList
	(*CustomListSettings)(nil),                            // 39: mullvad_daemon.management_interface.CustomListSettings
	(*Socks5Local)(nil),                                   // 40: mullvad_daemon.management_interface.Socks5Local
	(*SocksAuth)(nil),                                     // 41: mullvad_daemon.management_interface.SocksAuth
	(*Socks5Remote)(nil),                                  // 42: mullvad_daemon.management_interface.Socks5Remote
	(*Shadowsocks)(nil),                                   // 43: mullvad_daemon.management_interface.Shadowsocks
	(*CustomProxy)(nil),                                   // 44: mullvad_daemon.management_interface.CustomProxy
	(*AccessMethod)(nil),                                  // 45: mullvad_daemon.management_interface.AccessMethod
	(*AccessMethodSetting)(nil),                           // 46: mullvad_daemon.management_interface.AccessMethodSetting
	(*NewAccessMethodSetting)(nil),                        // 47: mullvad_daemon.management_interface.NewAccessMethodSetting
	(*ApiAccessMethodSettings)(nil),                       // 48: mullvad_daemon.management_interface.ApiAccessMethodSettings
	(*Settings)(nil),                                      // 49: mullvad_daemon.management_interface.Settings
	(*RelayOverride)(nil),                                 // 50: mullvad_daemon.management_interface.RelayOverride
	(*SplitTunnelSettings)(nil),                           // 51: mullvad_daemon.management_interface.SplitTunnelSettings
	(*RelaySettings)(nil),                                 // 52: mullvad_daemon.management_interface.RelaySettings
	(*NormalRelaySettings)(nil),                           // 53: mullvad_daemon.management_interface.NormalRelaySettings
	(*TransportPort)(nil),                                 // 54: mullvad_daemon.management_interface.TransportPort
	(*OpenvpnConstraints)(nil),                            // 55: mullvad_daemon.management_interface.OpenvpnConstraints
	(*WireguardConstraints)(nil),                          // 56: mullvad_daemon.management_interface.WireguardConstraints
	(*CustomRelaySettings)(nil),                           // 57: mullvad_daemon.management_interface.CustomRelaySettings
	(*ConnectionConfig)(nil),                              // 58: mullvad_daemon.management_interface.ConnectionConfig
	(*QuantumResistantState)(nil),                         // 59: mullvad_daemon.management_interface.QuantumResistantState
	(*DaitaSettings)(nil),                                 // 60: mullvad_daemon.management_interface.DaitaSettings
	(*TunnelOptions)(nil),                                 // 61: mullvad_daemon.management_interface.TunnelOptions
	(*DefaultDnsOptions)(nil),                             // 62: mullvad_daemon.management_interface.DefaultDnsOptions
	(*CustomDnsOptions)(nil),                              // 63: mullvad_daemon.management_interface.CustomDnsOptions
	(*DnsOptions)(nil),                                    // 64: mullvad_daemon.management_interface.DnsOptions
	(*PublicKey)(nil),                                     // 65: mullvad_daemon.management_interface.PublicKey
	(*ExcludedProcess)(nil),                               // 66: mullvad_daemon.management_interface.ExcludedProcess
	(*ExcludedProcessList)(nil),                           // 67: mullvad_daemon.management_interface.ExcludedProcessList
	(*AppVersionInfo)(nil),                                // 68: mullvad_daemon.management_interface.AppVersionInfo
	(*RelayListCountry)(nil),                              // 69: mullvad_daemon.management_interface.RelayListCountry
	(*RelayListCity)(nil),                                 // 70: mullvad_daemon.management_interface.RelayListCity
	(*Relay)(nil),                                         // 71: mullvad_daemon.management_interface.Relay
	(*WireguardRelayEndpointData)(nil),                    // 72: mullvad_daemon.management_interface.WireguardRelayEndpointData
	(*Location)(nil),                                      // 73: mullvad_daemon.management_interface.Location
	(*DaemonEvent)(nil),                                   // 74: mullvad_daemon.management_interface.DaemonEvent
	(*RelayList)(nil),                                     // 75: mullvad_daemon.management_interface.RelayList
	(*OpenVpnEndpointData)(nil),                           // 76: mullvad_daemon.management_interface.OpenVpnEndpointData
	(*OpenVpnEndpoint)(nil),                               // 77: mullvad_daemon.management_interface.OpenVpnEndpoint
	(*BridgeEndpointData)(nil),                            // 78: mullvad_daemon.management_interface.BridgeEndpointData
	(*ShadowsocksEndpointData)(nil),                       // 79: mullvad_daemon.management_interface.ShadowsocksEndpointData
	(*WireguardEndpointData)(nil),                         // 80: mullvad_daemon.management_interface.WireguardEndpointData
	(*PortRange)(nil),                                     // 81: mullvad_daemon.management_interface.PortRange
	(*AccountAndDevice)(nil),                              // 82: mullvad_daemon.management_interface.AccountAndDevice
	(*Device)(nil),                                        // 83: mullvad_daemon.management_interface.Device
	(*DeviceList)(nil),                                    // 84: mullvad_daemon.management_interface.DeviceList
	(*DeviceRemoval)(nil),                                 // 85: mullvad_daemon.management_interface.DeviceRemoval
	(*DeviceState)(nil),                                   // 86: mullvad_daemon.management_interface.DeviceState
	(*DeviceEvent)(nil),                                   // 87: mullvad_daemon.management_interface.DeviceEvent
	(*RemoveDeviceEvent)(nil),                             // 88: mullvad_daemon.management_interface.RemoveDeviceEvent
	(*ErrorState_FirewallPolicyError)(nil),                // 89: mullvad_daemon.management_interface.ErrorState.FirewallPolicyError
	(*TunnelState_Disconnected)(nil),                      // 90: mullvad_daemon.management_interface.TunnelState.Disconnected
	(*TunnelState_Connecting)(nil),                        // 91: mullvad_daemon.management_interface.TunnelState.Connecting
	(*TunnelState_Connected)(nil),                         // 92: mullvad_daemon.management_interface.TunnelState.Connected
	(*TunnelState_Disconnecting)(nil),                     // 93: mullvad_daemon.management_interface.TunnelState.Disconnecting
	(*TunnelState_Error)(nil),                             // 94: mullvad_daemon.management_interface.TunnelState.Error
	(*BridgeSettings_BridgeConstraints)(nil),              // 95: mullvad_daemon.management_interface.BridgeSettings.BridgeConstraints
	(*AccessMethod_Direct)(nil),                           // 96: mullvad_daemon.management_interface.AccessMethod.Direct
	(*AccessMethod_Bridges)(nil),                          // 97: mullvad_daemon.management_interface.AccessMethod.Bridges
	(*ConnectionConfig_OpenvpnConfig)(nil),                // 98: mullvad_daemon.management_interface.ConnectionConfig.OpenvpnConfig
	(*ConnectionConfig_WireguardConfig)(nil),              // 99: mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig
	(*ConnectionConfig_WireguardConfig_TunnelConfig)(nil), // 100: mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.TunnelConfig
	(*ConnectionConfig_WireguardConfig_PeerConfig)(nil),   // 101: mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.PeerConfig
	(*TunnelOptions_OpenvpnOptions)(nil),                  // 102: mullvad_daemon.management_interface.TunnelOptions.OpenvpnOptions
	(*TunnelOptions_WireguardOptions)(nil),                // 103: mullvad_daemon.management_interface.TunnelOptions.WireguardOptions
	(*TunnelOptions_GenericOptions)(nil),                  // 104: mullvad_daemon.management_interface.TunnelOptions.GenericOptions
	(*timestamppb.Timestamp)(nil),                         // 105: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),                        // 106: google.protobuf.StringValue
	(*anypb.Any)(nil),                                     // 107: google.protobuf.Any
	(*durationpb.Duration)(nil),                           // 108: google.protobuf.Duration
	(*emptypb.Empty)(nil),                                 // 109: google.protobuf.Empty
	(*wrapperspb.BoolValue)(nil),                          // 110: google.protobuf.BoolValue
	(*wrapperspb.UInt32Value)(nil),                        // 111: google.protobuf.UInt32Value
	(*wrapperspb.Int32Value)(nil),                         // 112: google.protobuf.Int32Value
}
var file_management_interface_proto_depIdxs = []int32{
	105, // 0: mullvad_daemon.management_interface.AccountData.expiry:type_name -> google.protobuf.Timestamp
	106, // 1: mullvad_daemon.management_interface.AccountHistory.token:type_name -> google.protobuf.StringValue
	105, // 2: mullvad_daemon.management_interface.VoucherSubmission.new_expiry:type_name -> google.protobuf.Timestamp
	7,   // 3: mullvad_daemon.management_interface.ErrorState.cause:type_name -> mullvad_daemon.management_interface.ErrorState.Cause
	89,  // 4: mullvad_daemon.management_interface.ErrorState.blocking_error:type_name -> mullvad_daemon.management_interface.ErrorState.FirewallPolicyError
	8,   // 5: mullvad_daemon.management_interface.ErrorState.auth_failed_error:type_name -> mullvad_daemon.management_interface.ErrorState.AuthFailedError
	9,   // 6: mullvad_daemon.management_interface.ErrorState.parameter_error:type_name -> mullvad_daemon.management_interface.ErrorState.GenerationError
	89,  // 7: mullvad_daemon.management_interface.ErrorState.policy_error:type_name -> mullvad_daemon.management_interface.ErrorState.FirewallPolicyError
	90,  // 8: mullvad_daemon.management_interface.TunnelState.disconnected:type_name -> mullvad_daemon.management_interface.TunnelState.Disconnected
	91,  // 9: mullvad_daemon.management_interface.TunnelState.connecting:type_name -> mullvad_daemon.management_interface.TunnelState.Connecting
	92,  // 10: mullvad_daemon.management_interface.TunnelState.connected:type_name -> mullvad_daemon.management_interface.TunnelState.Connected
	93,  // 11: mullvad_daemon.management_interface.TunnelState.disconnecting:type_name -> mullvad_daemon.management_interface.TunnelState.Disconnecting
	94,  // 12: mullvad_daemon.management_interface.TunnelState.error:type_name -> mullvad_daemon.management_interface.TunnelState.Error
	26,  // 13: mullvad_daemon.management_interface.TunnelStateRelayInfo.tunnel_endpoint:type_name -> mullvad_daemon.management_interface.TunnelEndpoint
	30,  // 14: mullvad_daemon.management_interface.TunnelStateRelayInfo.location:type_name -> mullvad_daemon.management_interface.GeoIpLocation
	6,   // 15: mullvad_daemon.management_interface.TunnelEndpoint.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	1,   // 16: mullvad_daemon.management_interface.TunnelEndpoint.tunnel_type:type_name -> mullvad_daemon.management_interface.TunnelType
	29,  // 17: mullvad_daemon.management_interface.TunnelEndpoint.proxy:type_name -> mullvad_daemon.management_interface.ProxyEndpoint
	27,  // 18: mullvad_daemon.management_interface.TunnelEndpoint.obfuscation:type_name -> mullvad_daemon.management_interface.ObfuscationEndpoint
	28,  // 19: mullvad_daemon.management_interface.TunnelEndpoint.entry_endpoint:type_name -> mullvad_daemon.management_interface.Endpoint
	31,  // 20: mullvad_daemon.management_interface.TunnelEndpoint.tunnel_metadata:type_name -> mullvad_daemon.management_interface.TunnelMetadata
	6,   // 21: mullvad_daemon.management_interface.ObfuscationEndpoint.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	2,   // 22: mullvad_daemon.management_interface.ObfuscationEndpoint.obfuscation_type:type_name -> mullvad_daemon.management_interface.ObfuscationType
	6,   // 23: mullvad_daemon.management_interface.Endpoint.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	6,   // 24: mullvad_daemon.management_interface.ProxyEndpoint.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	3,   // 25: mullvad_daemon.management_interface.ProxyEndpoint.proxy_type:type_name -> mullvad_daemon.management_interface.ProxyType
	11,  // 26: mullvad_daemon.management_interface.BridgeSettings.bridge_type:type_name -> mullvad_daemon.management_interface.BridgeSettings.BridgeType
	95,  // 27: mullvad_daemon.management_interface.BridgeSettings.normal:type_name -> mullvad_daemon.management_interface.BridgeSettings.BridgeConstraints
	44,  // 28: mullvad_daemon.management_interface.BridgeSettings.custom:type_name -> mullvad_daemon.management_interface.CustomProxy
	34,  // 29: mullvad_daemon.management_interface.LocationConstraint.location:type_name -> mullvad_daemon.management_interface.GeographicLocationConstraint
	12,  // 30: mullvad_daemon.management_interface.BridgeState.state:type_name -> mullvad_daemon.management_interface.BridgeState.State
	13,  // 31: mullvad_daemon.management_interface.ObfuscationSettings.selected_obfuscation:type_name -> mullvad_daemon.management_interface.ObfuscationSettings.SelectedObfuscation
	36,  // 32: mullvad_daemon.management_interface.ObfuscationSettings.udp2tcp:type_name -> mullvad_daemon.management_interface.Udp2TcpObfuscationSettings
	34,  // 33: mullvad_daemon.management_interface.CustomList.locations:type_name -> mullvad_daemon.management_interface.GeographicLocationConstraint
	38,  // 34: mullvad_daemon.management_interface.CustomListSettings.custom_lists:type_name -> mullvad_daemon.management_interface.CustomList
	6,   // 35: mullvad_daemon.management_interface.Socks5Local.remote_transport_protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	41,  // 36: mullvad_daemon.management_interface.Socks5Remote.auth:type_name -> mullvad_daemon.management_interface.SocksAuth
	40,  // 37: mullvad_daemon.management_interface.CustomProxy.socks5local:type_name -> mullvad_daemon.management_interface.Socks5Local
	42,  // 38: mullvad_daemon.management_interface.CustomProxy.socks5remote:type_name -> mullvad_daemon.management_interface.Socks5Remote
	43,  // 39: mullvad_daemon.management_interface.CustomProxy.shadowsocks:type_name -> mullvad_daemon.management_interface.Shadowsocks
	96,  // 40: mullvad_daemon.management_interface.AccessMethod.direct:type_name -> mullvad_daemon.management_interface.AccessMethod.Direct
	97,  // 41: mullvad_daemon.management_interface.AccessMethod.bridges:type_name -> mullvad_daemon.management_interface.AccessMethod.Bridges
	44,  // 42: mullvad_daemon.management_interface.AccessMethod.custom:type_name -> mullvad_daemon.management_interface.CustomProxy
	19,  // 43: mullvad_daemon.management_interface.AccessMethodSetting.id:type_name -> mullvad_daemon.management_interface.UUID
	45,  // 44: mullvad_daemon.management_interface.AccessMethodSetting.access_method:type_name -> mullvad_daemon.management_interface.AccessMethod
	45,  // 45: mullvad_daemon.management_interface.NewAccessMethodSetting.access_method:type_name -> mullvad_daemon.management_interface.AccessMethod
	46,  // 46: mullvad_daemon.management_interface.ApiAccessMethodSettings.direct:type_name -> mullvad_daemon.management_interface.AccessMethodSetting
	46,  // 47: mullvad_daemon.management_interface.ApiAccessMethodSettings.mullvad_bridges:type_name -> mullvad_daemon.management_interface.AccessMethodSetting
	46,  // 48: mullvad_daemon.management_interface.ApiAccessMethodSettings.custom:type_name -> mullvad_daemon.management_interface.AccessMethodSetting
	52,  // 49: mullvad_daemon.management_interface.Settings.relay_settings:type_name -> mullvad_daemon.management_interface.RelaySettings
	32,  // 50: mullvad_daemon.management_interface.Settings.bridge_settings:type_name -> mullvad_daemon.management_interface.BridgeSettings
	35,  // 51: mullvad_daemon.management_interface.Settings.bridge_state:type_name -> mullvad_daemon.management_interface.BridgeState
	61,  // 52: mullvad_daemon.management_interface.Settings.tunnel_options:type_name -> mullvad_daemon.management_interface.TunnelOptions
	51,  // 53: mullvad_daemon.management_interface.Settings.split_tunnel:type_name -> mullvad_daemon.management_interface.SplitTunnelSettings
	37,  // 54: mullvad_daemon.management_interface.Settings.obfuscation_settings:type_name -> mullvad_daemon.management_interface.ObfuscationSettings
	39,  // 55: mullvad_daemon.management_interface.Settings.custom_lists:type_name -> mullvad_daemon.management_interface.CustomListSettings
	48,  // 56: mullvad_daemon.management_interface.Settings.api_access_methods:type_name -> mullvad_daemon.management_interface.ApiAccessMethodSettings
	50,  // 57: mullvad_daemon.management_interface.Settings.relay_overrides:type_name -> mullvad_daemon.management_interface.RelayOverride
	57,  // 58: mullvad_daemon.management_interface.RelaySettings.custom:type_name -> mullvad_daemon.management_interface.CustomRelaySettings
	53,  // 59: mullvad_daemon.management_interface.RelaySettings.normal:type_name -> mullvad_daemon.management_interface.NormalRelaySettings
	33,  // 60: mullvad_daemon.management_interface.NormalRelaySettings.location:type_name -> mullvad_daemon.management_interface.LocationConstraint
	1,   // 61: mullvad_daemon.management_interface.NormalRelaySettings.tunnel_type:type_name -> mullvad_daemon.management_interface.TunnelType
	56,  // 62: mullvad_daemon.management_interface.NormalRelaySettings.wireguard_constraints:type_name -> mullvad_daemon.management_interface.WireguardConstraints
	55,  // 63: mullvad_daemon.management_interface.NormalRelaySettings.openvpn_constraints:type_name -> mullvad_daemon.management_interface.OpenvpnConstraints
	4,   // 64: mullvad_daemon.management_interface.NormalRelaySettings.ownership:type_name -> mullvad_daemon.management_interface.Ownership
	6,   // 65: mullvad_daemon.management_interface.TransportPort.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	54,  // 66: mullvad_daemon.management_interface.OpenvpnConstraints.port:type_name -> mullvad_daemon.management_interface.TransportPort
	5,   // 67: mullvad_daemon.management_interface.WireguardConstraints.ip_version:type_name -> mullvad_daemon.management_interface.IpVersion
	33,  // 68: mullvad_daemon.management_interface.WireguardConstraints.entry_location:type_name -> mullvad_daemon.management_interface.LocationConstraint
	58,  // 69: mullvad_daemon.management_interface.CustomRelaySettings.config:type_name -> mullvad_daemon.management_interface.ConnectionConfig
	98,  // 70: mullvad_daemon.management_interface.ConnectionConfig.openvpn:type_name -> mullvad_daemon.management_interface.ConnectionConfig.OpenvpnConfig
	99,  // 71: mullvad_daemon.management_interface.ConnectionConfig.wireguard:type_name -> mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig
	14,  // 72: mullvad_daemon.management_interface.QuantumResistantState.state:type_name -> mullvad_daemon.management_interface.QuantumResistantState.State
	102, // 73: mullvad_daemon.management_interface.TunnelOptions.openvpn:type_name -> mullvad_daemon.management_interface.TunnelOptions.OpenvpnOptions
	103, // 74: mullvad_daemon.management_interface.TunnelOptions.wireguard:type_name -> mullvad_daemon.management_interface.TunnelOptions.WireguardOptions
	104, // 75: mullvad_daemon.management_interface.TunnelOptions.generic:type_name -> mullvad_daemon.management_interface.TunnelOptions.GenericOptions
	64,  // 76: mullvad_daemon.management_interface.TunnelOptions.dns_options:type_name -> mullvad_daemon.management_interface.DnsOptions
	15,  // 77: mullvad_daemon.management_interface.DnsOptions.state:type_name -> mullvad_daemon.management_interface.DnsOptions.DnsState
	62,  // 78: mullvad_daemon.management_interface.DnsOptions.default_options:type_name -> mullvad_daemon.management_interface.DefaultDnsOptions
	63,  // 79: mullvad_daemon.management_interface.DnsOptions.custom_options:type_name -> mullvad_daemon.management_interface.CustomDnsOptions
	105, // 80: mullvad_daemon.management_interface.PublicKey.created:type_name -> google.protobuf.Timestamp
	66,  // 81: mullvad_daemon.management_interface.ExcludedProcessList.processes:type_name -> mullvad_daemon.management_interface.ExcludedProcess
	70,  // 82: mullvad_daemon.management_interface.RelayListCountry.cities:type_name -> mullvad_daemon.management_interface.RelayListCity
	71,  // 83: mullvad_daemon.management_interface.RelayListCity.relays:type_name -> mullvad_daemon.management_interface.Relay
	16,  // 84: mullvad_daemon.management_interface.Relay.endpoint_type:type_name -> mullvad_daemon.management_interface.Relay.RelayType
	107, // 85: mullvad_daemon.management_interface.Relay.endpoint_data:type_name -> google.protobuf.Any
	73,  // 86: mullvad_daemon.management_interface.Relay.location:type_name -> mullvad_daemon.management_interface.Location
	24,  // 87: mullvad_daemon.management_interface.DaemonEvent.tunnel_state:type_name -> mullvad_daemon.management_interface.TunnelState
	49,  // 88: mullvad_daemon.management_interface.DaemonEvent.settings:type_name -> mullvad_daemon.management_interface.Settings
	75,  // 89: mullvad_daemon.management_interface.DaemonEvent.relay_list:type_name -> mullvad_daemon.management_interface.RelayList
	68,  // 90: mullvad_daemon.management_interface.DaemonEvent.version_info:type_name -> mullvad_daemon.management_interface.AppVersionInfo
	87,  // 91: mullvad_daemon.management_interface.DaemonEvent.device:type_name -> mullvad_daemon.management_interface.DeviceEvent
	88,  // 92: mullvad_daemon.management_interface.DaemonEvent.remove_device:type_name -> mullvad_daemon.management_interface.RemoveDeviceEvent
	46,  // 93: mullvad_daemon.management_interface.DaemonEvent.new_access_method:type_name -> mullvad_daemon.management_interface.AccessMethodSetting
	69,  // 94: mullvad_daemon.management_interface.RelayList.countries:type_name -> mullvad_daemon.management_interface.RelayListCountry
	76,  // 95: mullvad_daemon.management_interface.RelayList.openvpn:type_name -> mullvad_daemon.management_interface.OpenVpnEndpointData
	78,  // 96: mullvad_daemon.management_interface.RelayList.bridge:type_name -> mullvad_daemon.management_interface.BridgeEndpointData
	80,  // 97: mullvad_daemon.management_interface.RelayList.wireguard:type_name -> mullvad_daemon.management_interface.WireguardEndpointData
	77,  // 98: mullvad_daemon.management_interface.OpenVpnEndpointData.endpoints:type_name -> mullvad_daemon.management_interface.OpenVpnEndpoint
	6,   // 99: mullvad_daemon.management_interface.OpenVpnEndpoint.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	79,  // 100: mullvad_daemon.management_interface.BridgeEndpointData.shadowsocks:type_name -> mullvad_daemon.management_interface.ShadowsocksEndpointData
	6,   // 101: mullvad_daemon.management_interface.ShadowsocksEndpointData.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	81,  // 102: mullvad_daemon.management_interface.WireguardEndpointData.port_ranges:type_name -> mullvad_daemon.management_interface.PortRange
	83,  // 103: mullvad_daemon.management_interface.AccountAndDevice.device:type_name -> mullvad_daemon.management_interface.Device
	105, // 104: mullvad_daemon.management_interface.Device.created:type_name -> google.protobuf.Timestamp
	83,  // 105: mullvad_daemon.management_interface.DeviceList.devices:type_name -> mullvad_daemon.management_interface.Device
	17,  // 106: mullvad_daemon.management_interface.DeviceState.state:type_name -> mullvad_daemon.management_interface.DeviceState.State
	82,  // 107: mullvad_daemon.management_interface.DeviceState.device:type_name -> mullvad_daemon.management_interface.AccountAndDevice
	18,  // 108: mullvad_daemon.management_interface.DeviceEvent.cause:type_name -> mullvad_daemon.management_interface.DeviceEvent.Cause
	86,  // 109: mullvad_daemon.management_interface.DeviceEvent.new_state:type_name -> mullvad_daemon.management_interface.DeviceState
	83,  // 110: mullvad_daemon.management_interface.RemoveDeviceEvent.new_device_list:type_name -> mullvad_daemon.management_interface.Device
	10,  // 111: mullvad_daemon.management_interface.ErrorState.FirewallPolicyError.type:type_name -> mullvad_daemon.management_interface.ErrorState.FirewallPolicyError.ErrorType
	30,  // 112: mullvad_daemon.management_interface.TunnelState.Disconnected.disconnected_location:type_name -> mullvad_daemon.management_interface.GeoIpLocation
	25,  // 113: mullvad_daemon.management_interface.TunnelState.Connecting.relay_info:type_name -> mullvad_daemon.management_interface.TunnelStateRelayInfo
	25,  // 114: mullvad_daemon.management_interface.TunnelState.Connected.relay_info:type_name -> mullvad_daemon.management_interface.TunnelStateRelayInfo
	0,   // 115: mullvad_daemon.management_interface.TunnelState.Disconnecting.after_disconnect:type_name -> mullvad_daemon.management_interface.AfterDisconnect
	23,  // 116: mullvad_daemon.management_interface.TunnelState.Error.error_state:type_name -> mullvad_daemon.management_interface.ErrorState
	33,  // 117: mullvad_daemon.management_interface.BridgeSettings.BridgeConstraints.location:type_name -> mullvad_daemon.management_interface.LocationConstraint
	4,   // 118: mullvad_daemon.management_interface.BridgeSettings.BridgeConstraints.ownership:type_name -> mullvad_daemon.management_interface.Ownership
	6,   // 119: mullvad_daemon.management_interface.ConnectionConfig.OpenvpnConfig.protocol:type_name -> mullvad_daemon.management_interface.TransportProtocol
	100, // 120: mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.tunnel:type_name -> mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.TunnelConfig
	101, // 121: mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.peer:type_name -> mullvad_daemon.management_interface.ConnectionConfig.WireguardConfig.PeerConfig
	108, // 122: mullvad_daemon.management_interface.TunnelOptions.WireguardOptions.rotation_interval:type_name -> google.protobuf.Duration
	59,  // 123: mullvad_daemon.management_interface.TunnelOptions.WireguardOptions.quantum_resistant:type_name -> mullvad_daemon.management_interface.QuantumResistantState
	60,  // 124: mullvad_daemon.management_interface.TunnelOptions.WireguardOptions.daita:type_name -> mullvad_daemon.management_interface.DaitaSettings
	109, // 125: mullvad_daemon.management_interface.ManagementService.ConnectTunnel:input_type -> google.protobuf.Empty
	109, // 126: mullvad_daemon.management_interface.ManagementService.DisconnectTunnel:input_type -> google.protobuf.Empty
	109, // 127: mullvad_daemon.management_interface.ManagementService.ReconnectTunnel:input_type -> google.protobuf.Empty
	109, // 128: mullvad_daemon.management_interface.ManagementService.GetTunnelState:input_type -> google.protobuf.Empty
	109, // 129: mullvad_daemon.management_interface.ManagementService.EventsListen:input_type -> google.protobuf.Empty
	109, // 130: mullvad_daemon.management_interface.ManagementService.PrepareRestart:input_type -> google.protobuf.Empty
	109, // 131: mullvad_daemon.management_interface.ManagementService.FactoryReset:input_type -> google.protobuf.Empty
	109, // 132: mullvad_daemon.management_interface.ManagementService.GetCurrentVersion:input_type -> google.protobuf.Empty
	109, // 133: mullvad_daemon.management_interface.ManagementService.GetVersionInfo:input_type -> google.protobuf.Empty
	109, // 134: mullvad_daemon.management_interface.ManagementService.IsPerformingPostUpgrade:input_type -> google.protobuf.Empty
	109, // 135: mullvad_daemon.management_interface.ManagementService.UpdateRelayLocations:input_type -> google.protobuf.Empty
	109, // 136: mullvad_daemon.management_interface.ManagementService.GetRelayLocations:input_type -> google.protobuf.Empty
	52,  // 137: mullvad_daemon.management_interface.ManagementService.SetRelaySettings:input_type -> mullvad_daemon.management_interface.RelaySettings
	32,  // 138: mullvad_daemon.management_interface.ManagementService.SetBridgeSettings:input_type -> mullvad_daemon.management_interface.BridgeSettings
	35,  // 139: mullvad_daemon.management_interface.ManagementService.SetBridgeState:input_type -> mullvad_daemon.management_interface.BridgeState
	37,  // 140: mullvad_daemon.management_interface.ManagementService.SetObfuscationSettings:input_type -> mullvad_daemon.management_interface.ObfuscationSettings
	109, // 141: mullvad_daemon.management_interface.ManagementService.GetSettings:input_type -> google.protobuf.Empty
	110, // 142: mullvad_daemon.management_interface.ManagementService.SetAllowLan:input_type -> google.protobuf.BoolValue
	110, // 143: mullvad_daemon.management_interface.ManagementService.SetShowBetaReleases:input_type -> google.protobuf.BoolValue
	110, // 144: mullvad_daemon.management_interface.ManagementService.SetBlockWhenDisconnected:input_type -> google.protobuf.BoolValue
	110, // 145: mullvad_daemon.management_interface.ManagementService.SetAutoConnect:input_type -> google.protobuf.BoolValue
	111, // 146: mullvad_daemon.management_interface.ManagementService.SetOpenvpnMssfix:input_type -> google.protobuf.UInt32Value
	111, // 147: mullvad_daemon.management_interface.ManagementService.SetWireguardMtu:input_type -> google.protobuf.UInt32Value
	110, // 148: mullvad_daemon.management_interface.ManagementService.SetEnableIpv6:input_type -> google.protobuf.BoolValue
	59,  // 149: mullvad_daemon.management_interface.ManagementService.SetQuantumResistantTunnel:input_type -> mullvad_daemon.management_interface.QuantumResistantState
	60,  // 150: mullvad_daemon.management_interface.ManagementService.SetDaitaSettings:input_type -> mullvad_daemon.management_interface.DaitaSettings
	64,  // 151: mullvad_daemon.management_interface.ManagementService.SetDnsOptions:input_type -> mullvad_daemon.management_interface.DnsOptions
	50,  // 152: mullvad_daemon.management_interface.ManagementService.SetRelayOverride:input_type -> mullvad_daemon.management_interface.RelayOverride
	109, // 153: mullvad_daemon.management_interface.ManagementService.ClearAllRelayOverrides:input_type -> google.protobuf.Empty
	109, // 154: mullvad_daemon.management_interface.ManagementService.CreateNewAccount:input_type -> google.protobuf.Empty
	106, // 155: mullvad_daemon.management_interface.ManagementService.LoginAccount:input_type -> google.protobuf.StringValue
	109, // 156: mullvad_daemon.management_interface.ManagementService.LogoutAccount:input_type -> google.protobuf.Empty
	106, // 157: mullvad_daemon.management_interface.ManagementService.GetAccountInfo:input_type -> google.protobuf.StringValue
	109, // 158: mullvad_daemon.management_interface.ManagementService.GetAccountHistory:input_type -> google.protobuf.Empty
	109, // 159: mullvad_daemon.management_interface.ManagementService.ClearAccountHistory:input_type -> google.protobuf.Empty
	109, // 160: mullvad_daemon.management_interface.ManagementService.GetWwwAuthToken:input_type -> google.protobuf.Empty
	106, // 161: mullvad_daemon.management_interface.ManagementService.SubmitVoucher:input_type -> google.protobuf.StringValue
	109, // 162: mullvad_daemon.management_interface.ManagementService.GetDevice:input_type -> google.protobuf.Empty
	109, // 163: mullvad_daemon.management_interface.ManagementService.UpdateDevice:input_type -> google.protobuf.Empty
	106, // 164: mullvad_daemon.management_interface.ManagementService.ListDevices:input_type -> google.protobuf.StringValue
	85,  // 165: mullvad_daemon.management_interface.ManagementService.RemoveDevice:input_type -> mullvad_daemon.management_interface.DeviceRemoval
	108, // 166: mullvad_daemon.management_interface.ManagementService.SetWireguardRotationInterval:input_type -> google.protobuf.Duration
	109, // 167: mullvad_daemon.management_interface.ManagementService.ResetWireguardRotationInterval:input_type -> google.protobuf.Empty
	109, // 168: mullvad_daemon.management_interface.ManagementService.RotateWireguardKey:input_type -> google.protobuf.Empty
	109, // 169: mullvad_daemon.management_interface.ManagementService.GetWireguardKey:input_type -> google.protobuf.Empty
	106, // 170: mullvad_daemon.management_interface.ManagementService.CreateCustomList:input_type -> google.protobuf.StringValue
	106, // 171: mullvad_daemon.management_interface.ManagementService.DeleteCustomList:input_type -> google.protobuf.StringValue
	38,  // 172: mullvad_daemon.management_interface.ManagementService.UpdateCustomList:input_type -> mullvad_daemon.management_interface.CustomList
	109, // 173: mullvad_daemon.management_interface.ManagementService.ClearCustomLists:input_type -> google.protobuf.Empty
	47,  // 174: mullvad_daemon.management_interface.ManagementService.AddApiAccessMethod:input_type -> mullvad_daemon.management_interface.NewAccessMethodSetting
	19,  // 175: mullvad_daemon.management_interface.ManagementService.RemoveApiAccessMethod:input_type -> mullvad_daemon.management_interface.UUID
	19,  // 176: mullvad_daemon.management_interface.ManagementService.SetApiAccessMethod:input_type -> mullvad_daemon.management_interface.UUID
	46,  // 177: mullvad_daemon.management_interface.ManagementService.UpdateApiAccessMethod:input_type -> mullvad_daemon.management_interface.AccessMethodSetting
	109, // 178: mullvad_daemon.management_interface.ManagementService.ClearCustomApiAccessMethods:input_type -> google.protobuf.Empty
	109, // 179: mullvad_daemon.management_interface.ManagementService.GetCurrentApiAccessMethod:input_type -> google.protobuf.Empty
	44,  // 180: mullvad_daemon.management_interface.ManagementService.TestCustomApiAccessMethod:input_type -> mullvad_daemon.management_interface.CustomProxy
	19,  // 181: mullvad_daemon.management_interface.ManagementService.TestApiAccessMethodById:input_type -> mullvad_daemon.management_interface.UUID
	109, // 182: mullvad_daemon.management_interface.ManagementService.GetSplitTunnelProcesses:input_type -> google.protobuf.Empty
	112, // 183: mullvad_daemon.management_interface.ManagementService.AddSplitTunnelProcess:input_type -> google.protobuf.Int32Value
	112, // 184: mullvad_daemon.management_interface.ManagementService.RemoveSplitTunnelProcess:input_type -> google.protobuf.Int32Value
	109, // 185: mullvad_daemon.management_interface.ManagementService.ClearSplitTunnelProcesses:input_type -> google.protobuf.Empty
	106, // 186: mullvad_daemon.management_interface.ManagementService.AddSplitTunnelApp:input_type -> google.protobuf.StringValue
	106, // 187: mullvad_daemon.management_interface.ManagementService.RemoveSplitTunnelApp:input_type -> google.protobuf.StringValue
	109, // 188: mullvad_daemon.management_interface.ManagementService.ClearSplitTunnelApps:input_type -> google.protobuf.Empty
	110, // 189: mullvad_daemon.management_interface.ManagementService.SetSplitTunnelState:input_type -> google.protobuf.BoolValue
	109, // 190: mullvad_daemon.management_interface.ManagementService.GetExcludedProcesses:input_type -> google.protobuf.Empty
	109, // 191: mullvad_daemon.management_interface.ManagementService.CheckVolumes:input_type -> google.protobuf.Empty
	106, // 192: mullvad_daemon.management_interface.ManagementService.ApplyJsonSettings:input_type -> google.protobuf.StringValue
	109, // 193: mullvad_daemon.management_interface.ManagementService.ExportJsonSettings:input_type -> google.protobuf.Empty
	110, // 194: mullvad_daemon.management_interface.ManagementService.ConnectTunnel:output_type -> google.protobuf.BoolValue
	110, // 195: mullvad_daemon.management_interface.ManagementService.DisconnectTunnel:output_type -> google.protobuf.BoolValue
	110, // 196: mullvad_daemon.management_interface.ManagementService.ReconnectTunnel:output_type -> google.protobuf.BoolValue
	24,  // 197: mullvad_daemon.management_interface.ManagementService.GetTunnelState:output_type -> mullvad_daemon.management_interface.TunnelState
	74,  // 198: mullvad_daemon.management_interface.ManagementService.EventsListen:output_type -> mullvad_daemon.management_interface.DaemonEvent
	109, // 199: mullvad_daemon.management_interface.ManagementService.PrepareRestart:output_type -> google.protobuf.Empty
	109, // 200: mullvad_daemon.management_interface.ManagementService.FactoryReset:output_type -> google.protobuf.Empty
	106, // 201: mullvad_daemon.management_interface.ManagementService.GetCurrentVersion:output_type -> google.protobuf.StringValue
	68,  // 202: mullvad_daemon.management_interface.ManagementService.GetVersionInfo:output_type -> mullvad_daemon.management_interface.AppVersionInfo
	110, // 203: mullvad_daemon.management_interface.ManagementService.IsPerformingPostUpgrade:output_type -> google.protobuf.BoolValue
	109, // 204: mullvad_daemon.management_interface.ManagementService.UpdateRelayLocations:output_type -> google.protobuf.Empty
	75,  // 205: mullvad_daemon.management_interface.ManagementService.GetRelayLocations:output_type -> mullvad_daemon.management_interface.RelayList
	109, // 206: mullvad_daemon.management_interface.ManagementService.SetRelaySettings:output_type -> google.protobuf.Empty
	109, // 207: mullvad_daemon.management_interface.ManagementService.SetBridgeSettings:output_type -> google.protobuf.Empty
	109, // 208: mullvad_daemon.management_interface.ManagementService.SetBridgeState:output_type -> google.protobuf.Empty
	109, // 209: mullvad_daemon.management_interface.ManagementService.SetObfuscationSettings:output_type -> google.protobuf.Empty
	49,  // 210: mullvad_daemon.management_interface.ManagementService.GetSettings:output_type -> mullvad_daemon.management_interface.Settings
	109, // 211: mullvad_daemon.management_interface.ManagementService.SetAllowLan:output_type -> google.protobuf.Empty
	109, // 212: mullvad_daemon.management_interface.ManagementService.SetShowBetaReleases:output_type -> google.protobuf.Empty
	109, // 213: mullvad_daemon.management_interface.ManagementService.SetBlockWhenDisconnected:output_type -> google.protobuf.Empty
	109, // 214: mullvad_daemon.management_interface.ManagementService.SetAutoConnect:output_type -> google.protobuf.Empty
	109, // 215: mullvad_daemon.management_interface.ManagementService.SetOpenvpnMssfix:output_type -> google.protobuf.Empty
	109, // 216: mullvad_daemon.management_interface.ManagementService.SetWireguardMtu:output_type -> google.protobuf.Empty
	109, // 217: mullvad_daemon.management_interface.ManagementService.SetEnableIpv6:output_type -> google.protobuf.Empty
	109, // 218: mullvad_daemon.management_interface.ManagementService.SetQuantumResistantTunnel:output_type -> google.protobuf.Empty
	109, // 219: mullvad_daemon.management_interface.ManagementService.SetDaitaSettings:output_type -> google.protobuf.Empty
	109, // 220: mullvad_daemon.management_interface.ManagementService.SetDnsOptions:output_type -> google.protobuf.Empty
	109, // 221: mullvad_daemon.management_interface.ManagementService.SetRelayOverride:output_type -> google.protobuf.Empty
	109, // 222: mullvad_daemon.management_interface.ManagementService.ClearAllRelayOverrides:output_type -> google.protobuf.Empty
	106, // 223: mullvad_daemon.management_interface.ManagementService.CreateNewAccount:output_type -> google.protobuf.StringValue
	109, // 224: mullvad_daemon.management_interface.ManagementService.LoginAccount:output_type -> google.protobuf.Empty
	109, // 225: mullvad_daemon.management_interface.ManagementService.LogoutAccount:output_type -> google.protobuf.Empty
	20,  // 226: mullvad_daemon.management_interface.ManagementService.GetAccountInfo:output_type -> mullvad_daemon.management_interface.AccountData
	21,  // 227: mullvad_daemon.management_interface.ManagementService.GetAccountHistory:output_type -> mullvad_daemon.management_interface.AccountHistory
	109, // 228: mullvad_daemon.management_interface.ManagementService.ClearAccountHistory:output_type -> google.protobuf.Empty
	106, // 229: mullvad_daemon.management_interface.ManagementService.GetWwwAuthToken:output_type -> google.protobuf.StringValue
	22,  // 230: mullvad_daemon.management_interface.ManagementService.SubmitVoucher:output_type -> mullvad_daemon.management_interface.VoucherSubmission
	86,  // 231: mullvad_daemon.management_interface.ManagementService.GetDevice:output_type -> mullvad_daemon.management_interface.DeviceState
	109, // 232: mullvad_daemon.management_interface.ManagementService.UpdateDevice:output_type -> google.protobuf.Empty
	84,  // 233: mullvad_daemon.management_interface.ManagementService.ListDevices:output_type -> mullvad_daemon.management_interface.DeviceList
	109, // 234: mullvad_daemon.management_interface.ManagementService.RemoveDevice:output_type -> google.protobuf.Empty
	109, // 235: mullvad_daemon.management_interface.ManagementService.SetWireguardRotationInterval:output_type -> google.protobuf.Empty
	109, // 236: mullvad_daemon.management_interface.ManagementService.ResetWireguardRotationInterval:output_type -> google.protobuf.Empty
	109, // 237: mullvad_daemon.management_interface.ManagementService.RotateWireguardKey:output_type -> google.protobuf.Empty
	65,  // 238: mullvad_daemon.management_interface.ManagementService.GetWireguardKey:output_type -> mullvad_daemon.management_interface.PublicKey
	106, // 239: mullvad_daemon.management_interface.ManagementService.CreateCustomList:output_type -> google.protobuf.StringValue
	109, // 240: mullvad_daemon.management_interface.ManagementService.DeleteCustomList:output_type -> google.protobuf.Empty
	109, // 241: mullvad_daemon.management_interface.ManagementService.UpdateCustomList:output_type -> google.protobuf.Empty
	109, // 242: mullvad_daemon.management_interface.ManagementService.ClearCustomLists:output_type -> google.protobuf.Empty
	19,  // 243: mullvad_daemon.management_interface.ManagementService.AddApiAccessMethod:output_type -> mullvad_daemon.management_interface.UUID
	109, // 244: mullvad_daemon.management_interface.ManagementService.RemoveApiAccessMethod:output_type -> google.protobuf.Empty
	109, // 245: mullvad_daemon.management_interface.ManagementService.SetApiAccessMethod:output_type -> google.protobuf.Empty
	109, // 246: mullvad_daemon.management_interface.ManagementService.UpdateApiAccessMethod:output_type -> google.protobuf.Empty
	109, // 247: mullvad_daemon.management_interface.ManagementService.ClearCustomApiAccessMethods:output_type -> google.protobuf.Empty
	46,  // 248: mullvad_daemon.management_interface.ManagementService.GetCurrentApiAccessMethod:output_type -> mullvad_daemon.management_interface.AccessMethodSetting
	110, // 249: mullvad_daemon.management_interface.ManagementService.TestCustomApiAccessMethod:output_type -> google.protobuf.BoolValue
	110, // 250: mullvad_daemon.management_interface.ManagementService.TestApiAccessMethodById:output_type -> google.protobuf.BoolValue
	112, // 251: mullvad_daemon.management_interface.ManagementService.GetSplitTunnelProcesses:output_type -> google.protobuf.Int32Value
	109, // 252: mullvad_daemon.management_interface.ManagementService.AddSplitTunnelProcess:output_type -> google.protobuf.Empty
	109, // 253: mullvad_daemon.management_interface.ManagementService.RemoveSplitTunnelProcess:output_type -> google.protobuf.Empty
	109, // 254: mullvad_daemon.management_interface.ManagementService.ClearSplitTunnelProcesses:output_type -> google.protobuf.Empty
	109, // 255: mullvad_daemon.management_interface.ManagementService.AddSplitTunnelApp:output_type -> google.protobuf.Empty
	109, // 256: mullvad_daemon.management_interface.ManagementService.RemoveSplitTunnelApp:output_type -> google.protobuf.Empty
	109, // 257: mullvad_daemon.management_interface.ManagementService.ClearSplitTunnelApps:output_type -> google.protobuf.Empty
	109, // 258: mullvad_daemon.management_interface.ManagementService.SetSplitTunnelState:output_type -> google.protobuf.Empty
	67,  // 259: mullvad_daemon.management_interface.ManagementService.GetExcludedProcesses:output_type -> mullvad_daemon.management_interface.ExcludedProcessList
	109, // 260: mullvad_daemon.management_interface.ManagementService.CheckVolumes:output_type -> google.protobuf.Empty
	109, // 261: mullvad_daemon.management_interface.ManagementService.ApplyJsonSettings:output_type -> google.protobuf.Empty
	106, // 262: mullvad_daemon.management_interface.ManagementService.ExportJsonSettings:output_type -> google.protobuf.StringValue
	194, // [194:263] is the sub-list for method output_type
	125, // [125:194] is the sub-list for method input_type
	125, // [125:125] is the sub-list for extension type_name
	125, // [125:125] is the sub-list for extension extendee
	0,   // [0:125] is the sub-list for field type_name
}

func init() { file_management_interface_proto_init() }
func file_management_interface_proto_init() {
	if File_management_interface_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_management_interface_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoucherSubmission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelStateRelayInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfuscationEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Endpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIpLocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocationConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeographicLocationConstraint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Udp2TcpObfuscationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfuscationSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomListSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socks5Local); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SocksAuth); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socks5Remote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shadowsocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomProxy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessMethodSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewAccessMethodSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApiAccessMethodSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayOverride); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTunnelSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelaySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NormalRelaySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransportPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenvpnConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireguardConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomRelaySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QuantumResistantState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaitaSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefaultDnsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomDnsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcludedProcess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExcludedProcessList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppVersionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayListCountry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayListCity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Relay); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireguardRelayEndpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DaemonEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelayList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenVpnEndpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenVpnEndpoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeEndpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShadowsocksEndpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WireguardEndpointData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccountAndDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceRemoval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveDeviceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ErrorState_FirewallPolicyError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState_Disconnected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState_Connecting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState_Connected); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState_Disconnecting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelState_Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BridgeSettings_BridgeConstraints); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessMethod_Direct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessMethod_Bridges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConfig_OpenvpnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConfig_WireguardConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConfig_WireguardConfig_TunnelConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectionConfig_WireguardConfig_PeerConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOptions_OpenvpnOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOptions_WireguardOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_management_interface_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelOptions_GenericOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_management_interface_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TunnelState_Disconnected_)(nil),
		(*TunnelState_Connecting_)(nil),
		(*TunnelState_Connected_)(nil),
		(*TunnelState_Disconnecting_)(nil),
		(*TunnelState_Error_)(nil),
	}
	file_management_interface_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*LocationConstraint_CustomList)(nil),
		(*LocationConstraint_Location)(nil),
	}
	file_management_interface_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*CustomProxy_Socks5Local)(nil),
		(*CustomProxy_Socks5Remote)(nil),
		(*CustomProxy_Shadowsocks)(nil),
	}
	file_management_interface_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*AccessMethod_Direct_)(nil),
		(*AccessMethod_Bridges_)(nil),
		(*AccessMethod_Custom)(nil),
	}
	file_management_interface_proto_msgTypes[31].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[33].OneofWrappers = []interface{}{
		(*RelaySettings_Custom)(nil),
		(*RelaySettings_Normal)(nil),
	}
	file_management_interface_proto_msgTypes[34].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[35].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[37].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[39].OneofWrappers = []interface{}{
		(*ConnectionConfig_Openvpn)(nil),
		(*ConnectionConfig_Wireguard)(nil),
	}
	file_management_interface_proto_msgTypes[49].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[52].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*DaemonEvent_TunnelState)(nil),
		(*DaemonEvent_Settings)(nil),
		(*DaemonEvent_RelayList)(nil),
		(*DaemonEvent_VersionInfo)(nil),
		(*DaemonEvent_Device)(nil),
		(*DaemonEvent_RemoveDevice)(nil),
		(*DaemonEvent_NewAccessMethod)(nil),
	}
	file_management_interface_proto_msgTypes[70].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[80].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[83].OneofWrappers = []interface{}{}
	file_management_interface_proto_msgTypes[84].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_management_interface_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_management_interface_proto_goTypes,
		DependencyIndexes: file_management_interface_proto_depIdxs,
		EnumInfos:         file_management_interface_proto_enumTypes,
		MessageInfos:      file_management_interface_proto_msgTypes,
	}.Build()
	File_management_interface_proto = out.File
	file_management_interface_proto_rawDesc = nil
	file_management_interface_proto_goTypes = nil
	file_management_interface_proto_depIdxs = nil
}
